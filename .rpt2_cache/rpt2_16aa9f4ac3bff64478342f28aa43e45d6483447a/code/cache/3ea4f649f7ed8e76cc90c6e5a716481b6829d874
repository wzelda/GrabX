{
  "code": "import * as Data from \"../Data/Data\";\r\nimport * as Manager from \"../Manager/Manager\";\r\nimport GEvent from \"./GEvent\";\r\nimport * as Config from \"../Config/Config\";\r\nimport * as Common from \"../Common/Common\";\r\nimport * as Utils from \"./Utils\";\r\nimport LocalConfig from \"../Config/LocalConfig\";\r\nlet platform = window['wx'];\r\nexport function Login(isUnionId) {\r\n    if (Utils.isMiniGame() == false)\r\n        return;\r\n    platform.login({\r\n        success(res) {\r\n            if (res.code) {\r\n                if (isUnionId) {\r\n                    getSetting(res.code);\r\n                }\r\n                else {\r\n                    let req = Config.ReqData.Login;\r\n                    req.Name = res.code;\r\n                    Data.LoginData.SendReq(req);\r\n                }\r\n            }\r\n            else {\r\n                console.log('登录失败！' + res.errMsg);\r\n            }\r\n        }\r\n    });\r\n}\r\nexport function loadAllSubpackages(thisArg, callback) {\r\n    if (Utils.isMiniGame() == false || Config.UIConfig.SubPkgs.length == 0) {\r\n        if (callback) {\r\n            callback.call(thisArg);\r\n        }\r\n        return;\r\n    }\r\n    ;\r\n    Config.UIConfig.SubPkgs.forEach(pkg => {\r\n        const loadTask = platform.loadSubpackage({\r\n            name: pkg,\r\n            success: function (res) {\r\n                console.log(\"success\");\r\n            },\r\n            fail: function (res) {\r\n                console.log(\"fail\");\r\n            }\r\n        });\r\n    });\r\n}\r\nexport function shareTicketMode() {\r\n    if (Utils.isMiniGame() == false)\r\n        return;\r\n    platform.updateShareMenu({\r\n        withShareTicket: true,\r\n    });\r\n}\r\nexport function getShareTicket() {\r\n    if (Utils.isMiniGame() == false)\r\n        return;\r\n    let launchInfo = platform.getLaunchOptionsSync();\r\n    console.log('>>>>>>>>>>>>>微信登录信息：', launchInfo);\r\n    if (launchInfo && launchInfo.shareTicket) {\r\n        console.log('>>>>>>>>>>>>>>shareTicket：', launchInfo.shareTicket);\r\n        return launchInfo.shareTicket;\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\nexport function getShareInfo() {\r\n    if (Utils.isMiniGame() == false)\r\n        return;\r\n    let ticket = getShareTicket();\r\n    let launchInfo = platform.getLaunchOptionsSync();\r\n    if (launchInfo && launchInfo.query) {\r\n    }\r\n}\r\nexport function showShareMenu() {\r\n    if (Utils.isMiniGame() == false)\r\n        return;\r\n    platform.showShareMenu({\r\n        withShareTicket: true\r\n    });\r\n    platform.onShareAppMessage(() => ({\r\n        title: Data.GetShareWord(),\r\n        imageUrl: Config.UIConfig.ShareImagePath.InviteFriend,\r\n        query: 'shareID=' + Data.LoginData.AccountKey,\r\n    }));\r\n}\r\nexport function ShareMessage(msg, imgPath, useScreenShot) {\r\n    if (Utils.isMiniGame() == false)\r\n        return;\r\n    let sysInfo = platform.getSystemInfoSync();\r\n    if (useScreenShot == true) {\r\n        imgPath = window[\"canvas\"].toTempFilePathSync({\r\n            destWidth: sysInfo.windowWidth * sysInfo.pixelRatio,\r\n            destHeight: sysInfo.windowHeight * sysInfo.pixelRatio\r\n        });\r\n    }\r\n    platform.shareAppMessage({\r\n        title: msg,\r\n        imageUrl: imgPath,\r\n        query: 'shareID=' + Data.LoginData.AccountKey\r\n    });\r\n}\r\nexport function onShow(callback) {\r\n    if (Utils.isMiniGame() == false)\r\n        return;\r\n    platform.onShow(callback);\r\n}\r\nexport function offShow(callback) {\r\n    if (Utils.isMiniGame() == false)\r\n        return;\r\n    platform.offShow(callback);\r\n}\r\nexport function ClearLocalCache() {\r\n    if (Utils.isMiniGame() == false)\r\n        return;\r\n    window[\"canvas\"].getSavedFileList({\r\n        success(res) {\r\n            console.log(res.fileList.length);\r\n            if (res.fileList.length > 0) {\r\n                res.fileList.forEach((file) => {\r\n                    platform.removeSavedFile({\r\n                        filePath: file.filePath,\r\n                        complete(res) {\r\n                            console.log(res);\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n        }\r\n    });\r\n}\r\nexport function CanvasToTempFilePath(callback) {\r\n    if (Utils.isMiniGame() == false)\r\n        return;\r\n    let sysInfo = platform.getSystemInfoSync();\r\n    console.log(sysInfo);\r\n    let destSize = new Laya.Point(sysInfo.windowWidth * sysInfo.pixelRatio, sysInfo.windowHeight * sysInfo.pixelRatio);\r\n    console.log(destSize);\r\n    window[\"canvas\"].toTempFilePath({\r\n        x: 0,\r\n        y: 0,\r\n        width: destSize.x,\r\n        height: destSize.y,\r\n        destWidth: destSize.x,\r\n        destHeight: destSize.y,\r\n        canvasId: 'myCanvas',\r\n        success(res) {\r\n            console.log(res.tempFilePath);\r\n            platform.saveImageToPhotosAlbum({\r\n                filePath: res.tempFilePath,\r\n                success(res) {\r\n                    console.log(\"保存图片成功\");\r\n                    console.log(res);\r\n                    platform.showToast({\r\n                        title: '保存成功',\r\n                        icon: 'success',\r\n                        duration: 2000,\r\n                    });\r\n                    callback();\r\n                },\r\n                fail(err) {\r\n                    console.log('失败');\r\n                    console.log(err);\r\n                    callback();\r\n                    if (err.errMsg) {\r\n                        platform.openSetting({\r\n                            success(settingdata) {\r\n                                console.log(settingdata);\r\n                                if (settingdata.authSetting[\"scope.writePhotosAlbum\"]) {\r\n                                    console.log('获取权限成功，给出再次点击图片保存到相册的提示。');\r\n                                }\r\n                                else {\r\n                                    console.log('获取权限失败，给出不给权限就无法正常使用的提示');\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    });\r\n}\r\nexport function getUserNickName(callback) {\r\n    if (!platform)\r\n        return;\r\n    platform.getSetting({\r\n        success(res) {\r\n            if (!res.authSetting['scope.userInfo']) {\r\n                platform.authorize({\r\n                    scope: 'scope.userInfo',\r\n                    success() {\r\n                        platform.startRecord();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    });\r\n    platform.getUserInfo({\r\n        success(res) {\r\n            const userInfo = res.userInfo;\r\n            const nickName = userInfo.nickName;\r\n            const avatarUrl = userInfo.avatarUrl;\r\n            const gender = userInfo.gender;\r\n            const province = userInfo.province;\r\n            const city = userInfo.city;\r\n            const country = userInfo.country;\r\n        }\r\n    });\r\n}\r\nexport function showTipsWindow(tipTitle, tipContent, tipsConfirmTxt, confirmCallbak, cancelCallback) {\r\n    if (Utils.isMiniGame() == false)\r\n        return;\r\n    platform.showModal({\r\n        title: tipTitle || '提示',\r\n        content: tipContent,\r\n        confirmText: tipsConfirmTxt || '确定',\r\n        success(res) {\r\n            if (res.confirm) {\r\n                console.log('用户点击确定');\r\n                if (typeof (confirmCallbak) == 'function') {\r\n                    confirmCallbak();\r\n                }\r\n                return true;\r\n            }\r\n            else if (res.cancel) {\r\n                console.log('用户点击取消');\r\n                if (typeof (cancelCallback) == 'function') {\r\n                    cancelCallback();\r\n                }\r\n                return false;\r\n            }\r\n        }\r\n    });\r\n}\r\nlet rewardedVideoAd;\r\nlet rewardAdIdx = 0;\r\nexport function createRewardedVideoAd(onCloseCallback, onErrorCallback, thisTarget) {\r\n    if (Utils.isMiniGame() == false)\r\n        return;\r\n    let sdkVersion = platform.getSystemInfoSync().SDKVersion;\r\n    if (!sdkVersion || parseInt(sdkVersion.replace(/\\./g, '')) < 204)\r\n        return;\r\n    let adInfo = { adUnitId: \"\" };\r\n    if (rewardAdIdx >= LocalConfig.RewardAdList.length)\r\n        rewardAdIdx = 0;\r\n    console.log('激励广告：', LocalConfig.RewardAdList[rewardAdIdx]);\r\n    adInfo.adUnitId = LocalConfig.RewardAdList[rewardAdIdx];\r\n    if (rewardedVideoAd == null) {\r\n        rewardedVideoAd = platform.createRewardedVideoAd(adInfo);\r\n    }\r\n    if (rewardedVideoAd == null)\r\n        return;\r\n    rewardedVideoAd.load().then(() => {\r\n        rewardedVideoAd.show().catch(err => {\r\n            console.log('创建激励广告失败：', err);\r\n            onErrorCallback.call(thisTarget);\r\n        });\r\n    });\r\n    rewardAdIdx++;\r\n    rewardedVideoAd.onError(onRewardAdError);\r\n    let closeFunc = function (res) {\r\n        console.log('是否看完广告：', res);\r\n        if (res.isEnded && typeof (onCloseCallback) == 'function') {\r\n            onCloseCallback.call(thisTarget);\r\n        }\r\n        rewardedVideoAd.offClose(closeFunc);\r\n    };\r\n    rewardedVideoAd.onClose(closeFunc);\r\n}\r\nfunction onRewardAdError(err) {\r\n    console.log(err);\r\n    rewardedVideoAd.offError(onRewardAdError);\r\n}\r\nlet bannerAd;\r\nlet bannerIdx = 0;\r\nexport function createBannerAd(adInfo) {\r\n    if (Utils.isMiniGame() == false)\r\n        return;\r\n    let sysInfo = platform.getSystemInfoSync();\r\n    let sdkVersion = sysInfo.SDKVersion;\r\n    if (!sdkVersion || parseInt(sdkVersion.replace(/\\./g, '')) < 204)\r\n        return;\r\n    if (!adInfo)\r\n        adInfo = {};\r\n    if (bannerIdx >= LocalConfig.BannerAdList.length)\r\n        bannerIdx = 0;\r\n    console.log('Banner广告：', LocalConfig.BannerAdList[bannerIdx]);\r\n    adInfo.adUnitId = LocalConfig.BannerAdList[bannerIdx];\r\n    adInfo.style = {\r\n        left: 0,\r\n        top: sysInfo.windowHeight - 100,\r\n        width: sysInfo.windowWidth,\r\n    };\r\n    if (bannerAd == null) {\r\n        bannerAd = platform.createBannerAd(adInfo);\r\n    }\r\n    else {\r\n        bannerAd.destroy();\r\n        bannerAd = platform.createBannerAd(adInfo);\r\n    }\r\n    if (bannerAd == null)\r\n        return;\r\n    bannerAd.onResize(res => {\r\n        bannerAd.style.top = sysInfo.windowHeight - res.height;\r\n        if (sysInfo.model == 'iPhone X') {\r\n            bannerAd.style.top -= 20;\r\n        }\r\n    });\r\n    bannerAd.onError(onBannerAdError);\r\n    bannerAd.show().catch(err => {\r\n        console.log('创建Banner广告失败：', err);\r\n    });\r\n    bannerIdx++;\r\n}\r\nfunction onBannerAdError(err) {\r\n    console.log(err);\r\n    bannerAd.offError(onBannerAdError);\r\n}\r\nexport function hideBannerAd() {\r\n    if (Utils.isMiniGame() == false)\r\n        return;\r\n    if (bannerAd == null)\r\n        return;\r\n    bannerAd.hide();\r\n}\r\nexport function downloadFile(url, callback) {\r\n    if (Utils.isMiniGame() == false || !url)\r\n        return;\r\n    console.log('下载地址：', url);\r\n    platform.downloadFile({\r\n        url: url,\r\n        success(res) {\r\n            if (res.statusCode === 200) {\r\n                if (typeof (callback) == 'function') {\r\n                    callback(res.tempFilePath);\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\nexport function getWindowSize() {\r\n    if (Utils.isMiniGame() == false)\r\n        return;\r\n    let sysInfo = platform.getSystemInfoSync();\r\n    console.log(sysInfo);\r\n    return {\r\n        width: sysInfo.windowWidth * sysInfo.pixelRatio,\r\n        height: sysInfo.windowHeight * sysInfo.pixelRatio\r\n    };\r\n}\r\nexport function getSetting(loginCode) {\r\n    if (Utils.isMiniGame() == false)\r\n        return;\r\n    platform.getSetting({\r\n        success(res) {\r\n            console.log(res.authSetting);\r\n            if (res.authSetting['scope.userInfo']) {\r\n                platform.getUserInfo({\r\n                    success(res) {\r\n                        res.code = loginCode;\r\n                        console.log(res);\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                createUserInfoButton(loginCode);\r\n                LocalConfig.IsWxAuth = false;\r\n                Manager.LoadingProgressManager.Inst.ShowWxLogin();\r\n            }\r\n        }\r\n    });\r\n}\r\nexport function createUserInfoButton(loginCode) {\r\n    if (Utils.isMiniGame() == false)\r\n        return;\r\n    let sysInfo = platform.getSystemInfoSync();\r\n    const button = platform.createUserInfoButton({\r\n        type: 'text',\r\n        text: '',\r\n        style: {\r\n            left: 0,\r\n            top: 0,\r\n            width: sysInfo.windowWidth,\r\n            height: sysInfo.windowHeight,\r\n        }\r\n    });\r\n    button.onTap((res) => {\r\n        console.log(res);\r\n        if (res.encryptedData) {\r\n            res.code = loginCode;\r\n            button.destroy();\r\n        }\r\n    });\r\n    GEvent.AddListener(Common.SceneLoginEid.LoginSuccess, () => { button.destroy(); }, this);\r\n}\r\nexport function checkUpdate(callback) {\r\n    if (Utils.isMiniGame() == false)\r\n        return;\r\n    if (typeof (platform.getUpdateManager) === 'function') {\r\n        const updateManager = platform.getUpdateManager();\r\n        updateManager.onCheckForUpdate(function (res) {\r\n            console.log('检查新版本结果：', res.hasUpdate);\r\n            if (typeof callback == 'function') {\r\n                callback(res.hasUpdate);\r\n            }\r\n            if (res.hasUpdate) {\r\n                window[\"wxDownloader\"].cleanOldAssets();\r\n            }\r\n        });\r\n        updateManager.onUpdateReady(function () {\r\n            if (typeof callback == 'function') {\r\n                callback(true);\r\n            }\r\n            platform.showModal({\r\n                title: '更新提示',\r\n                content: '新版本已经准备好，即将重启游戏',\r\n                showCancel: false,\r\n                success(res) {\r\n                    if (res.confirm) {\r\n                        updateManager.applyUpdate();\r\n                    }\r\n                }\r\n            });\r\n        });\r\n        updateManager.onUpdateFailed(function () {\r\n        });\r\n    }\r\n}\r\nexport function postOpenRegionMessage(eventId) {\r\n    if (Utils.isMiniGame() == false)\r\n        return;\r\n    const openDataContext = platform.getOpenDataContext();\r\n    openDataContext.postMessage({\r\n        eventId: eventId,\r\n    });\r\n}\r\nexport function postOpenRegionData(data) {\r\n    if (Utils.isMiniGame() == false)\r\n        return;\r\n    const openDataContext = platform.getOpenDataContext();\r\n    openDataContext.postMessage(data);\r\n}\r\nexport function setUserCloudStorage(data, callback, thisArg) {\r\n    if (Utils.isMiniGame() == false)\r\n        return;\r\n    platform.setUserCloudStorage({\r\n        KVDataList: data,\r\n        success() {\r\n            if (typeof callback == 'function')\r\n                callback.call(thisArg);\r\n        }\r\n    });\r\n}\r\nexport function getLaunchOptionsSync() {\r\n    if (Utils.isMiniGame() == false)\r\n        return;\r\n    let launchInfo = platform.getLaunchOptionsSync();\r\n    console.log('启动信息：', launchInfo);\r\n    return launchInfo;\r\n}\r\nexport function getLoginAppid() {\r\n    if (Utils.isMiniGame() == false)\r\n        return;\r\n    let launchInfo = platform.getLaunchOptionsSync();\r\n    if (launchInfo && launchInfo.referrerInfo) {\r\n        console.log('入口Appid：', launchInfo.referrerInfo.appId);\r\n        return launchInfo.referrerInfo.appId;\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\nexport function getLaunchScene() {\r\n    if (Utils.isMiniGame() == false)\r\n        return;\r\n    let launchInfo = platform.getLaunchOptionsSync();\r\n    console.log('场景值：', launchInfo.scene);\r\n    if (launchInfo) {\r\n        return launchInfo.scene;\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\nexport function IsLoginFromFavourite() {\r\n    if (Utils.isMiniGame() == false)\r\n        return;\r\n    let scene = getLaunchScene();\r\n    return scene == 1104 || scene == 1103;\r\n}\r\nexport function navigateToMiniProgram(appId, path, extraData, envVersion, callback, thisArg) {\r\n    if (Utils.isMiniGame() == false || !appId)\r\n        return;\r\n    platform.navigateToMiniProgram({\r\n        appId: appId,\r\n        path: path,\r\n        extraData: extraData,\r\n        envVersion: envVersion,\r\n        success(res) {\r\n            if (typeof callback == 'function')\r\n                callback.call(thisArg);\r\n        }\r\n    });\r\n}\r\nexport function goMaikeShopping(extraData, callback, thisArg, envVersion) {\r\n    if (Utils.isMiniGame() == false)\r\n        return;\r\n    navigateToMiniProgram(LocalConfig.MiniProgramAppId.Maike, null, extraData, envVersion, callback, thisArg);\r\n}\r\nexport function onReturnGame(cb, thisArg) {\r\n    if (Utils.isMiniGame() == false)\r\n        return;\r\n    if (typeof cb == 'function') {\r\n        onShow(cb);\r\n    }\r\n}\r\nlet subContentView;\r\nexport function setSubContentView(subView) {\r\n    if (!subView)\r\n        return;\r\n    subContentView = subView;\r\n}\r\nexport function getSubContentView() {\r\n    return subContentView;\r\n}\r\n",
  "references": [
    "E:/Practise/demo3DLaya/GrabX/src/Data/Data.ts",
    "E:/Practise/demo3DLaya/GrabX/src/Manager/Manager.ts",
    "E:/Practise/demo3DLaya/GrabX/src/Common/GEvent.ts",
    "E:/Practise/demo3DLaya/GrabX/src/Config/Config.ts",
    "E:/Practise/demo3DLaya/GrabX/src/Common/Common.ts",
    "E:/Practise/demo3DLaya/GrabX/src/Common/Utils.ts",
    "E:/Practise/demo3DLaya/GrabX/src/Config/LocalConfig.ts"
  ]
}
