{
  "code": "let timerId = -1;\r\nlet timerPool = new Array();\r\nlet timerList = new Array();\r\nexport class Timer {\r\n    constructor() {\r\n        this.CurCd = 0;\r\n        this.EndTime = 0;\r\n        this.IsRun = false;\r\n        this.IsStart = false;\r\n        this.IsAlive = true;\r\n        this.autoRemove = true;\r\n    }\r\n    Init(cd, startCallback, updateCallback, endCallback, target, thisArg, autoRemove, autoStart) {\r\n        this.Id = timerId + 1;\r\n        this.MaxCd = cd;\r\n        this.CurCd = 0;\r\n        this.OnStart = startCallback;\r\n        this.OnUpdate = updateCallback;\r\n        this.OnEnd = endCallback;\r\n        this.Target = target;\r\n        this.ThisArg = thisArg;\r\n        this.EndTime = 0;\r\n        this.IsRun = false;\r\n        this.IsStart = false;\r\n        this.IsAlive = true;\r\n        this.autoRemove = autoRemove != null ? autoRemove : true;\r\n        if (autoStart != false) {\r\n            this.Start();\r\n        }\r\n    }\r\n    Update() {\r\n        if (!this.IsAlive)\r\n            return;\r\n        let currtime = Date.now();\r\n        if (currtime < this.EndTime) {\r\n            this.CurCd = (this.EndTime - currtime) * 0.001;\r\n            if (typeof (this.OnUpdate) == \"function\") {\r\n                this.OnUpdate.call(this.ThisArg, this.CurCd, this.Target);\r\n            }\r\n            requestAnimationFrame(this.Update.bind(this));\r\n        }\r\n        else {\r\n            this.IsRun = false;\r\n            this.IsStart = false;\r\n            if (typeof (this.OnEnd) == \"function\") {\r\n                this.OnEnd.call(this.ThisArg, this.Target);\r\n            }\r\n            if (this.autoRemove) {\r\n                this.Remove();\r\n            }\r\n        }\r\n    }\r\n    Start() {\r\n        this.IsRun = true;\r\n        if (!this.IsStart) {\r\n            this.IsStart = true;\r\n            this.StartTime = Date.now();\r\n            this.EndTime = this.StartTime + this.MaxCd * 1000;\r\n            if (typeof (this.OnStart) == \"function\") {\r\n                this.OnStart.call(this.ThisArg, this.Target);\r\n            }\r\n            this.Update();\r\n        }\r\n    }\r\n    ResetCd(cd) {\r\n        if (typeof (cd) != \"number\")\r\n            return;\r\n        this.MaxCd = cd;\r\n        this.EndTime = Date.now() + this.MaxCd * 1000;\r\n    }\r\n    Remove() {\r\n        this.OnStart = null;\r\n        this.OnUpdate = null;\r\n        this.OnEnd = null;\r\n        this.Target = null;\r\n        this.ThisArg = null;\r\n        this.IsRun = false;\r\n        this.IsStart = false;\r\n        this.IsAlive = false;\r\n        let index = timerPool.indexOf(this);\r\n        if (index > 0) {\r\n            timerPool.splice(index, 1);\r\n            timerPool.unshift(this);\r\n        }\r\n    }\r\n}\r\nexport class TimerManager {\r\n    constructor() { }\r\n    static NewTimer(thisArg, cd, startCallback, updateCallback, endCallback, target, autoRemove, autoStart) {\r\n        let t = timerPool[0];\r\n        if (!t || t.IsAlive) {\r\n            t = new Timer();\r\n            timerList[t.Id] = t;\r\n            timerPool.push(t);\r\n        }\r\n        t.Init(cd, startCallback, updateCallback, endCallback, target, thisArg, autoRemove);\r\n        return t;\r\n    }\r\n    static RemoveTimer(thisArg) {\r\n        if (!thisArg)\r\n            return;\r\n        timerPool.forEach(timer => {\r\n            if (timer.ThisArg && timer.ThisArg.id == thisArg.id) {\r\n                timer.Remove();\r\n            }\r\n        });\r\n    }\r\n    static RemoveAllTimer() {\r\n        for (let i in timerList) {\r\n            timerList[i].Remove();\r\n        }\r\n    }\r\n    static Update() {\r\n        for (let i in timerList) {\r\n            if (timerList[i].IsAlive) {\r\n                timerList[i].Update();\r\n            }\r\n        }\r\n    }\r\n    static ClearAllTimer() {\r\n        for (let i in timerList) {\r\n            timerList[i].Remove();\r\n            delete timerList[i];\r\n        }\r\n    }\r\n}\r\n",
  "references": [
    "E:/Practise/demo3DLaya/GrabX/src/UI/Core.ts",
    "E:/Practise/demo3DLaya/GrabX/src/UI/UI.ts",
    "E:/Practise/demo3DLaya/GrabX/src/Common/Utils.ts",
    "E:/Practise/demo3DLaya/GrabX/src/Config/LocalConfig.ts",
    "E:/Practise/demo3DLaya/GrabX/src/Config/Config.ts",
    "E:/Practise/demo3DLaya/GrabX/src/Common/Common.ts"
  ]
}
