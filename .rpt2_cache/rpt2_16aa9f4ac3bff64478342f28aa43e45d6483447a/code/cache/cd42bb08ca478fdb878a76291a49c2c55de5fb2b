{
  "code": "import * as Config from \"../Config/Config\";\r\nimport * as Manager from \"../Manager/Manager\";\r\nimport * as Common from \"../Common/Common\";\r\nlet ViewMap = {};\r\nlet OpenedCtrl = new Array();\r\nexport let CtrlMapArray = new Array();\r\nexport let ViewMapArray = {};\r\nclass CtrlLisener {\r\n    constructor(obj, lisener) {\r\n        if (!obj)\r\n            return;\r\n        this.Obj = obj;\r\n        this.Lisener = lisener;\r\n    }\r\n    remove() {\r\n        this.Obj.offClick(this, this.Lisener);\r\n    }\r\n}\r\nexport { OpenedCtrl, ViewMap };\r\nexport class UiCVBase extends Common.EventDispather {\r\n    onDestroy() {\r\n        this.removeEventListener();\r\n    }\r\n}\r\nexport class Controller extends UiCVBase {\r\n    constructor(cKey, view, isFullScreen, isPopup) {\r\n        super();\r\n        this.IsOpen = false;\r\n        this.IsDestroyed = true;\r\n        this.IsShow = false;\r\n        this.IsPopup = false;\r\n        this.IsFullScreen = false;\r\n        this.IsDefault = false;\r\n        this.IsInteractive = true;\r\n        this.lisenterArray = new Array();\r\n        if (!cKey || !view) {\r\n            console.error(\"Invalid key or view\");\r\n            return;\r\n        }\r\n        ;\r\n        if (!OpenedCtrl[cKey]) {\r\n            OpenedCtrl[cKey] = this;\r\n        }\r\n        let vKey = view.Key;\r\n        if (!ViewMap[vKey]) {\r\n            ViewMap[vKey] = new view(vKey);\r\n        }\r\n        this.multitonKey = cKey;\r\n        this.View = ViewMap[vKey];\r\n        this.IsFullScreen = isFullScreen == true;\r\n        this.IsPopup = isPopup == true;\r\n    }\r\n    static set Key(key) { this.cKey = key; }\r\n    static get Key() { return this.cKey; }\r\n    static setCtrl(id) {\r\n        CtrlMapArray[id] = this;\r\n    }\r\n    static init(cKey, view, vKey) {\r\n        this.Key = cKey;\r\n        this.view = view;\r\n        this.view.Key = vKey ? vKey : cKey;\r\n        CtrlMapArray[this.Key] = this;\r\n    }\r\n    createView(view, key) {\r\n        this.View = new view(key);\r\n    }\r\n    create() {\r\n        if (!this.View) {\r\n            console.error(\"No view created!\");\r\n            return false;\r\n        }\r\n        this.IsDestroyed = false;\r\n        this.View.Initialize();\r\n        this.onCreate();\r\n        return true;\r\n    }\r\n    open(_data) {\r\n        this.IsOpen = true;\r\n        this.Data = _data;\r\n        this.show(_data);\r\n        this.openOver();\r\n    }\r\n    openOver() {\r\n        if (this.IsFullScreen) {\r\n            this.dispatchEvent(Common.UiNoticeEid.OpenFullScreen, this.multitonKey);\r\n        }\r\n        if (this.IsPopup) {\r\n            this.SortingOrder(Config.UIConfig.SortingOrder.Popup);\r\n        }\r\n        this.onOpen(this.Data);\r\n    }\r\n    addButtonLisenter(object, fun, data, thisArg) {\r\n        if (object == null || fun == null) {\r\n            console.error(\"object or fun is null\");\r\n            return;\r\n        }\r\n        thisArg = thisArg ? thisArg : this;\r\n        object.onClick(thisArg, fun, data);\r\n        this.lisenterArray.push(new CtrlLisener(object, fun));\r\n    }\r\n    close() {\r\n        if (this.IsOpen == false)\r\n            return;\r\n        this.IsOpen = false;\r\n        this.onClose();\r\n        this.dispatchEvent(Common.UiNoticeEid.CloseController, this.multitonKey);\r\n        if (this.IsPopup) {\r\n            this.dispatchEvent(Common.UiNoticeEid.ClosePopup, this.multitonKey);\r\n        }\r\n        if (this.IsFullScreen) {\r\n            this.dispatchEvent(Common.UiNoticeEid.CloseFullScreen, this.multitonKey);\r\n        }\r\n        OpenedCtrl[this.multitonKey] = null;\r\n        for (let i in this.lisenterArray) {\r\n            this.lisenterArray[i].remove();\r\n            this.lisenterArray[i] = null;\r\n        }\r\n        this.removeEventListener();\r\n        Laya.timer.clearAll(this);\r\n        if (this.IsDestroyed == false) {\r\n            this.IsDestroyed = true;\r\n            if (this.View && this.View.destroy) {\r\n                this.View.destroy();\r\n                this.View = null;\r\n            }\r\n        }\r\n        this.IsOpen = false;\r\n        this.IsShow = false;\r\n        this.Data = null;\r\n        this.destroy();\r\n    }\r\n    show(data) {\r\n        data = data ? data : this.Data;\r\n        if (this.IsDestroyed) {\r\n            this.open(data);\r\n        }\r\n        if (!this.IsOpen) {\r\n            return false;\r\n        }\r\n        if (this.IsShow) {\r\n            return false;\r\n        }\r\n        if (!this.IsDestroyed) {\r\n            this.View.show(data);\r\n        }\r\n        this.IsShow = true;\r\n        this.onShow(data);\r\n        return true;\r\n    }\r\n    hide() {\r\n        if (!this.IsShow)\r\n            return false;\r\n        if (!this.IsDestroyed) {\r\n            this.View.hide();\r\n        }\r\n        this.IsShow = false;\r\n        this.onHide();\r\n        return true;\r\n    }\r\n    SortingOrder(order) {\r\n        if (!this.IsDestroyed) {\r\n            this.View.SortingOrder(order);\r\n        }\r\n    }\r\n    interactive(canTouch) {\r\n        if (canTouch == null)\r\n            return;\r\n        this.IsInteractive = canTouch;\r\n        if (!this.IsDestroyed) {\r\n            this.View.interactive(canTouch);\r\n        }\r\n        this.onInteractive(canTouch);\r\n    }\r\n    refreshUI(data) {\r\n        this.View.refreshUI(data);\r\n    }\r\n    onClose() { }\r\n    onCreate() { }\r\n    onOpen(data) { }\r\n    onShow(data) { }\r\n    onHide() { }\r\n    onInteractive(canTouch) { }\r\n}\r\nexport class View extends UiCVBase {\r\n    constructor(key) {\r\n        super();\r\n        this.lisenterArray = new Array();\r\n        this.CallbackList = [];\r\n        this.multitonKey = key;\r\n        this._isAlive = true;\r\n        if (!ViewMap[key]) {\r\n            ViewMap[key] = this;\r\n        }\r\n        this.uiCfg = Config.ViewKit[key];\r\n        if (!this.uiCfg) {\r\n            console.error('Incorrect view key!');\r\n            return;\r\n        }\r\n    }\r\n    static set Key(key) { this.vKey = key; }\r\n    static get Key() { return this.vKey; }\r\n    get UI() {\r\n        return this._UI;\r\n    }\r\n    get IsAlive() {\r\n        return this._isAlive;\r\n    }\r\n    Initialize() {\r\n        if (!this._UI) {\r\n            this._UI = Manager.SpawnManager.LoadView(this.uiCfg.Pkg, this.uiCfg.Com);\r\n            if (!this._UI) {\r\n                console.error('Invalid Ui com: ', this.uiCfg.Key);\r\n            }\r\n            else {\r\n                this.Window = this.UI.getChild('Window');\r\n                this.LoadView();\r\n            }\r\n        }\r\n    }\r\n    getInstance(key) {\r\n        if (!key)\r\n            return null;\r\n        if (!ViewMap[key]) {\r\n            ViewMap[key] = new View(key);\r\n        }\r\n        return ViewMap[key];\r\n    }\r\n    setCallback(callbackKey, callback) {\r\n        this.CallbackList[callbackKey] = callback;\r\n    }\r\n    invokeCallback(callbackKey, ...args) {\r\n        if (typeof (callbackKey) != 'string' || typeof (this.CallbackList[callbackKey]) != 'function')\r\n            return;\r\n        this.CallbackList[callbackKey](...args);\r\n    }\r\n    addButtonLisenter(object, fun, data, thisArg) {\r\n        if (object == null || fun == null) {\r\n            console.error(\"object or fun is null\");\r\n            return;\r\n        }\r\n        thisArg = thisArg ? thisArg : this;\r\n        object.onClick(thisArg, fun, data);\r\n        this.lisenterArray.push(new CtrlLisener(object, fun));\r\n    }\r\n    clickListCallback(thisArg, func, ...data) {\r\n        Common.clickListCallback(this.List, thisArg, func, ...data);\r\n    }\r\n    destroy() {\r\n        this.onDestroy();\r\n        this._isAlive = false;\r\n        this.removeEventListener();\r\n        Laya.timer.clearAll(this);\r\n        for (let i in this.lisenterArray) {\r\n            this.lisenterArray[i].remove();\r\n            this.lisenterArray[i] = null;\r\n        }\r\n        delete ViewMap[this.multitonKey];\r\n        this._UI.dispose();\r\n    }\r\n    onDestroy() { }\r\n    LoadView() { }\r\n    refreshUI(data) { }\r\n    interactive(canTouch) {\r\n        this._UI.touchable = canTouch;\r\n    }\r\n    SortingOrder(order) {\r\n        this._UI.sortingOrder = order;\r\n    }\r\n    show(data) {\r\n        this._UI.visible = true;\r\n    }\r\n    hide() {\r\n        this._UI.visible = false;\r\n    }\r\n}\r\nexport class Facade {\r\n    constructor() { }\r\n    static PushCtrl(ctrl, data) {\r\n        if (!ctrl)\r\n            return;\r\n        OpenedCtrl.push(ctrl);\r\n        let nextc = OpenedCtrl.shift();\r\n        if (nextc) {\r\n            nextc.show(data);\r\n        }\r\n    }\r\n    static getController(id) {\r\n        let ctrl = CtrlMapArray[id];\r\n        if (ctrl)\r\n            return new ctrl();\r\n        else\r\n            return null;\r\n    }\r\n}\r\n",
  "references": [
    "E:/Practise/demo3DLaya/GrabX/src/Config/Config.ts",
    "E:/Practise/demo3DLaya/GrabX/src/Manager/Manager.ts",
    "E:/Practise/demo3DLaya/GrabX/src/Common/Common.ts"
  ]
}
