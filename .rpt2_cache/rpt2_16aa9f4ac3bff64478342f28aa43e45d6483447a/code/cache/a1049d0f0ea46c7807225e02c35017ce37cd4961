{
  "code": "import { UIConfig } from \"../Config/UIConfig\";\r\nimport * as Config from \"../Config/Config\";\r\nimport * as Manager from \"../Manager/Manager\";\r\nexport function ConvertTime(cd, ignoreHour) {\r\n    if (cd == undefined)\r\n        return;\r\n    let hours = (\"0\" + Math.floor(cd / 3600)).slice(-2);\r\n    let minutes = (\"0\" + Math.floor((cd % 3600) / 60)).slice(-2);\r\n    let seconds = (\"0\" + Math.ceil(cd % 60)).slice(-2);\r\n    if (ignoreHour) {\r\n        return minutes + \":\" + seconds;\r\n    }\r\n    return hours + \":\" + minutes + \":\" + seconds;\r\n}\r\nexport function PlayPopupEffect(windowUi, callback, thisArg) {\r\n    if (windowUi instanceof fgui.GObject) {\r\n        windowUi.setPivot(0.5, 0.5);\r\n        fgui.GTween.to(0, 1, 0.5)\r\n            .setTarget(windowUi, windowUi.setScale)\r\n            .onComplete(callback, thisArg);\r\n    }\r\n}\r\nexport function ColorHex2Dec(colorStr) {\r\n    if (colorStr == null)\r\n        return;\r\n    colorStr = colorStr.split(\"|\");\r\n    if (colorStr instanceof Array && colorStr.length == 3) {\r\n        colorStr.forEach((value, index) => {\r\n            colorStr[index] = parseInt(value, 16);\r\n        });\r\n    }\r\n    return colorStr;\r\n}\r\nexport function isAncestorOf(parent, child) {\r\n    if (parent == null || child == null)\r\n        return false;\r\n    if (parent == child)\r\n        return true;\r\n    var p = child.parent;\r\n    while (p) {\r\n        if (p == parent)\r\n            return true;\r\n        p = p.parent;\r\n    }\r\n    return false;\r\n}\r\nexport function isInRect(xv, yv, dest) {\r\n    if (xv == null || yv == null || !dest)\r\n        return;\r\n    let pt = dest.localToGlobal();\r\n    if (xv < pt.x || xv > pt.x + dest.width || yv < pt.y || yv > pt.y + dest.height) {\r\n        return false;\r\n    }\r\n    else {\r\n        return true;\r\n    }\r\n}\r\nexport function getBtnInfoParts(btn) {\r\n    return {\r\n        Progress_Health: btn.getChild('Progress_Health').asProgress,\r\n        Progress_Exp: btn.getChild('Progress_Exp').asProgress,\r\n        Text_Level: btn.getChild('Text_Level').asTextField,\r\n        Text_TipsHealth: btn.getChild('Text_TipsHealth').asTextField,\r\n    };\r\n}\r\nexport function StringFormat(str, ...args) {\r\n    if (typeof (str) != 'string')\r\n        return;\r\n    if (args == null || args.length == 0)\r\n        return str;\r\n    let param = args[0];\r\n    let s = str;\r\n    if (typeof (param) == 'object') {\r\n        for (let key in param)\r\n            s = s.replace(new RegExp(\"\\\\{\" + key + \"\\\\}\", \"g\"), param[key]);\r\n        return s;\r\n    }\r\n    else {\r\n        for (let i = 0; i < args.length; i++)\r\n            s = s.replace(new RegExp(\"\\\\{\" + i + \"\\\\}\", \"g\"), args[i]);\r\n        return s;\r\n    }\r\n}\r\nexport function SetTxtProperty(txt, isBold, isUnderline) {\r\n    if (txt instanceof fgui.GTextField == false)\r\n        return;\r\n    if (typeof (isBold) == 'boolean') {\r\n        txt._label._isBold = isBold;\r\n    }\r\n    if (typeof (isUnderline) == 'boolean') {\r\n        txt._label._isUnderline = isUnderline;\r\n    }\r\n}\r\nexport function SetNonnegative(num) {\r\n    if (num < 0) {\r\n        num = 0;\r\n    }\r\n    return num;\r\n}\r\nexport function SetGControllerIdx(gctrl, idx) {\r\n    if (gctrl instanceof fgui.Controller == false || typeof idx != 'number')\r\n        return;\r\n    if (idx < 0 || idx >= gctrl.pageCount)\r\n        return;\r\n    gctrl.selectedIndex = idx;\r\n}\r\nexport function GetObjectLength(object) {\r\n    if (!object)\r\n        return 0;\r\n    let len = 0;\r\n    for (let i in object) {\r\n        len++;\r\n    }\r\n    return len;\r\n}\r\nexport function ArrayEquals(arr1, arr2) {\r\n    if (!arr1 || !arr2)\r\n        return false;\r\n    if (arr1.length != arr2.length)\r\n        return false;\r\n    for (var i = 0, l = arr1.length; i < l; i++) {\r\n        if (arr1[i] instanceof Array && arr2[i] instanceof Array) {\r\n            if (ArrayEquals(arr1, arr2) == false)\r\n                return false;\r\n        }\r\n        else if (arr1[i] != arr2[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nexport function searchArray(arr, param, value) {\r\n    if (Array.isArray(arr) == false || arr.length == 0) {\r\n        console.error('Invalid or empty array');\r\n        return;\r\n    }\r\n    let target;\r\n    arr.some(v => {\r\n        if (v[param] == value) {\r\n            target = v;\r\n            return true;\r\n        }\r\n    });\r\n    return target;\r\n}\r\nexport function getCardPath(_data) {\r\n    if (!_data.PicUrl)\r\n        return { path: \"\", url: \"\" };\r\n    let pakNum = Math.ceil(_data.PicUrl / 6);\r\n    let pakName = \"Postcard\" + pakNum;\r\n    let url = \"ui://\" + pakName + \"/\" + _data.Title;\r\n    let info = { path: pakName + \"/\" + pakName, url: url };\r\n    return info;\r\n}\r\nexport function isMiniGame() {\r\n    return Laya.Browser.onMiniGame;\r\n}\r\nexport function isOnWeixin() {\r\n    return Laya.Browser.onWeiXin;\r\n}\r\nexport function isOnQQ() {\r\n    return Laya.Browser.onMQQBrowser;\r\n}\r\nexport function isOnTencent() {\r\n    return isOnQQ() || isOnWeixin();\r\n}\r\nexport function AdGetRewardBtn(adCom) {\r\n    if (!adCom)\r\n        return;\r\n    let button_GetReward = adCom.getChild(\"Button_GetReward\").asButton;\r\n    let button_DoubleReward = adCom.getChild(\"Button_DoubleReward\").asButton;\r\n    let button_AdGetReward = adCom.getChild(\"Button_AdGetReward\").asButton;\r\n    return {\r\n        GetBtnType: adCom.getController('BtnType_C'),\r\n        Button_GetReward: button_GetReward,\r\n        Button_OneReward: adCom.getChild(\"Button_OneReward\").asButton,\r\n        Button_DoubleReward: button_DoubleReward,\r\n        Button_AdGetReward: button_AdGetReward,\r\n        GetRewardType: button_AdGetReward.getController('Type_C'),\r\n        GetDoubleRewardType: button_DoubleReward.getController('Type_C'),\r\n    };\r\n}\r\nexport function saveLocalStorage(key, value) {\r\n    if (!value)\r\n        return;\r\n    Laya.LocalStorage.setItem(key, value);\r\n}\r\nexport function getLocalStorage(key) {\r\n    return Laya.LocalStorage.getItem(key);\r\n}\r\nexport function saveLocalJson(key, value) {\r\n    if (!value)\r\n        return;\r\n    Laya.LocalStorage.setJSON(key, value);\r\n}\r\nexport function getLocalJson(key) {\r\n    return Laya.LocalStorage.getJSON(key);\r\n}\r\nexport function copyData(srcData, targetData) {\r\n    if (!srcData || !targetData)\r\n        return;\r\n    for (let i in srcData) {\r\n        if (typeof srcData[i] != 'function') {\r\n            targetData[i] = srcData[i];\r\n        }\r\n    }\r\n}\r\nlet tipsUi;\r\nexport function ShowTips(msg) {\r\n    if (!tipsUi) {\r\n        let viewName = Config.ViewKit.TipsLabel;\r\n        tipsUi = Manager.SpawnManager.LoadView(viewName.Pkg, viewName.Com);\r\n        tipsUi.sortingOrder = UIConfig.SortingOrder.MsgTips;\r\n    }\r\n    if (tipsUi.visible)\r\n        return;\r\n    msg = msg ? msg : Config.LocalContent.FlyingTipsDefault;\r\n    tipsUi.text = msg;\r\n    tipsUi.visible = true;\r\n    tipsUi.getTransition('Effect_Show').play(Laya.Handler.create(this, () => { tipsUi.visible = false; }));\r\n}\r\nlet adobeAddTipsUi;\r\nfunction setAdobeResNum(txtCom, resNum) {\r\n    if (resNum >= 0) {\r\n        txtCom.color = '#00FF00';\r\n        txtCom.text = '+' + resNum;\r\n    }\r\n    else {\r\n        txtCom.color = '#FF0000';\r\n        txtCom.text = '-' + -resNum;\r\n    }\r\n}\r\nlet txtShadowFilter;\r\nexport function setTxtShadow(gtxt) {\r\n    if (!gtxt)\r\n        return;\r\n    if (!txtShadowFilter) {\r\n        txtShadowFilter = new Laya.GlowFilter('#000000', 1, 1, 1);\r\n    }\r\n    gtxt.displayObject.filters = [txtShadowFilter];\r\n}\r\nexport function JsCallJava(classPath, javaFunc, data, widthBack) {\r\n    if (!Laya.Browser.onAndroid)\r\n        return;\r\n    let bridge = window[\"PlatformClass\"].createClass(classPath);\r\n    if (widthBack) {\r\n        let obj = { value: data };\r\n        bridge.callWithBack(function (value) {\r\n            var obj = JSON.parse(value);\r\n            alert(obj.value);\r\n        }, javaFunc, JSON.stringify(obj));\r\n    }\r\n    else {\r\n        let resp = bridge.call(javaFunc, data);\r\n        alert(resp);\r\n    }\r\n}\r\nfunction getBytesLength(str) {\r\n    if (!str || typeof str != 'string') {\r\n        return 0;\r\n    }\r\n    return str.replace(/[^\\x00-\\xff]/g, 'xx').length;\r\n}\r\nexport function strByteLen(str) {\r\n    let byteLen = 0, len;\r\n    if (str && typeof str == 'string') {\r\n        len = str.length;\r\n        for (let i = 0; i < len; i++) {\r\n            if (str.charCodeAt(i) > 255) {\r\n                byteLen += 2;\r\n            }\r\n            else {\r\n                byteLen++;\r\n            }\r\n        }\r\n    }\r\n    return byteLen;\r\n}\r\nexport function deepCopy(src, target) {\r\n    if (!src || !target)\r\n        return;\r\n    if (src != null) {\r\n        for (let i in src) {\r\n            let value = src[i];\r\n            if (Array.isArray(value)) {\r\n                target[i] = [];\r\n                [...target[i]] = value;\r\n            }\r\n            else if (typeof value == 'object') {\r\n                target[i] = {};\r\n                deepCopy(value, target[i]);\r\n            }\r\n            else {\r\n                target[i] = value;\r\n            }\r\n        }\r\n    }\r\n}\r\nexport class ItemBtnPartsClass {\r\n    constructor(btn) {\r\n        this.Text_Title = btn.getChild('title').asTextField;\r\n        this.Text_AwardNum = btn.getChild('Text_AwardNum').asTextField;\r\n    }\r\n}\r\nexport function fillItemData(itemdata, btn) {\r\n    if (!itemdata || !btn)\r\n        return;\r\n    let parts = new ItemBtnPartsClass(btn);\r\n}\r\nexport function fillItemListData(itemdataArr, list) {\r\n    if (!itemdataArr || !list)\r\n        return;\r\n    itemdataArr.forEach(v => {\r\n        fillItemData(v, list.addItemFromPool().asCom);\r\n    });\r\n}\r\nfunction onClickListItem(thisArg, func, data, item) {\r\n    let idx = item.parent.asList.getChildIndex(item);\r\n    func.call(thisArg, idx + 1, ...data);\r\n}\r\nexport function clickListCallback(list, thisArg, func, ...data) {\r\n    if (!list || !func)\r\n        return;\r\n    list.on(fgui.Events.CLICK_ITEM, thisArg, onClickListItem, [thisArg, func, data]);\r\n}\r\n",
  "references": [
    "E:/Practise/demo3DLaya/GrabX/src/Config/LocalConfig.ts",
    "E:/Practise/demo3DLaya/GrabX/src/Config/UIConfig.ts",
    "E:/Practise/demo3DLaya/GrabX/src/Config/Config.ts",
    "E:/Practise/demo3DLaya/GrabX/src/Data/Data.ts",
    "E:/Practise/demo3DLaya/GrabX/src/Manager/Manager.ts"
  ]
}
