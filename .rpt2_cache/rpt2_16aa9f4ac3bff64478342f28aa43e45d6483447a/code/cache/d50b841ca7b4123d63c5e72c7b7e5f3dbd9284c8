{
  "code": "import * as Core from \"../UI/Core\";\r\nimport * as UI from \"../UI/UI\";\r\nimport * as Config from \"../Config/Config\";\r\nimport * as Manager from \"./Manager\";\r\nimport * as Common from \"../Common/Common\";\r\nlet GuideList = new Array();\r\nexport class UIManager extends Manager.BaseManager {\r\n    constructor() {\r\n        super();\r\n    }\r\n    static get Inst() {\r\n        if (!this._inst) {\r\n            this._inst = new UIManager();\r\n        }\r\n        return this._inst;\r\n    }\r\n    onAwake() {\r\n        UIManager._inst = this;\r\n        UIManager.setUiKeys();\r\n        UIManager.addListeners();\r\n    }\r\n    static setUiKeys() {\r\n        let cfg = Config.ViewKit;\r\n        UI.LoadingProgressController.init(cfg.LoadingProgress.Key, UI.LoadingProgressView);\r\n        UI.LoadingController.init(cfg.LoadingMain.Key, UI.LoadingView);\r\n        UI.ChooseServiceController.init(cfg.ChooseService.Key, UI.ChooseServiceView);\r\n        UI.PublicConfirmationController.init(cfg.PublicConfirmation.Key, UI.PublicConfirmationView);\r\n    }\r\n    static addListeners() {\r\n        for (let i in Config.ViewKit) {\r\n            let cfg = Config.ViewKit[i];\r\n            if (cfg && cfg.Key) {\r\n                this.addEventListener(cfg.Key, this.goOpen.bind(this, cfg.Key));\r\n            }\r\n        }\r\n        this.addEventListener(Common.UiNoticeEid.CloseController, this.onCloseController);\r\n        this.addEventListener(Common.UiNoticeEid.OpenFullScreen, this.onOpenFullscreen);\r\n        this.addEventListener(Common.UiNoticeEid.CloseFullScreen, this.onCloseFullscreen);\r\n        this.addEventListener(Common.UiNoticeEid.ClosePopup, this.openNextPopup);\r\n    }\r\n    static goOpen(key, ...data) {\r\n        let c = Core.CtrlMapArray[key];\r\n        if (c) {\r\n            this.openController(c, ...data);\r\n        }\r\n    }\r\n    static openController(ctrl, ..._data) {\r\n        if (!ctrl)\r\n            return;\r\n        let cKey = ctrl.Key;\r\n        let ctrlInst = Core.OpenedCtrl[cKey];\r\n        if (!ctrlInst || ctrlInst.IsDestroyed) {\r\n            ctrlInst = new ctrl(ctrl.Key, ctrl.view);\r\n        }\r\n        else {\r\n            console.log('Controller has opened: ', cKey);\r\n            ctrlInst.show(..._data);\r\n            fgui.GRoot.inst.setChildIndex(Core.ViewMap[cKey].UI, fgui.GRoot.inst.numChildren);\r\n            return;\r\n        }\r\n        return this.checkOpenCtrlInst(ctrlInst, ..._data);\r\n    }\r\n    static checkOpenCtrlInst(ctrlInst, ..._data) {\r\n        if (ctrlInst.IsPopup) {\r\n            ctrlInst = this.getNextPopup(ctrlInst, ..._data);\r\n            if (!ctrlInst)\r\n                return;\r\n        }\r\n        let done = ctrlInst.create();\r\n        if (done) {\r\n            ctrlInst.open(..._data);\r\n        }\r\n        else {\r\n            console.error(\"Open controller failed\");\r\n            return;\r\n        }\r\n        if (ctrlInst.IsPopup) {\r\n            ctrlInst.SortingOrder(Config.UIConfig.SortingOrder.Popup);\r\n        }\r\n        return ctrlInst;\r\n    }\r\n    static onCloseController(ckey) {\r\n        let ctrl = Core.OpenedCtrl[ckey];\r\n        Manager.TimerManager.RemoveTimer(ctrl);\r\n    }\r\n    static onOpenFullscreen(ckey) {\r\n        this.hideOtherUI(ckey);\r\n    }\r\n    static onCloseFullscreen(ckey) {\r\n        this.showOtherUI(ckey);\r\n    }\r\n    static hideOtherUI(ckey) {\r\n        for (let i in Core.OpenedCtrl) {\r\n            if (i == ckey)\r\n                break;\r\n            let ctrl = Core.OpenedCtrl[i];\r\n            if (ctrl && ctrl.IsShow) {\r\n                ctrl.View.UI.visible = false;\r\n            }\r\n        }\r\n    }\r\n    static showOtherUI(ckey) {\r\n        for (let i in Core.OpenedCtrl) {\r\n            if (i == ckey)\r\n                return;\r\n            let ctrl = Core.OpenedCtrl[i];\r\n            if (ctrl && ctrl.IsShow) {\r\n                ctrl.View.UI.visible = true;\r\n            }\r\n        }\r\n    }\r\n    static openPopup(popupCtrl, data) {\r\n        if (!popupCtrl)\r\n            return;\r\n        if (UIManager.PopupMap.length > 0) {\r\n            UIManager.PopupMap.push(popupCtrl);\r\n            UIManager.PopupData[popupCtrl.Key] = data;\r\n            let popup = UIManager.PopupMap.shift();\r\n            UIManager.openController(popup, UIManager.PopupData[popup.Key]);\r\n        }\r\n        else {\r\n            UIManager.openController(popupCtrl, data);\r\n        }\r\n    }\r\n    static getNextPopup(popupCtrl, ...data) {\r\n        if (!popupCtrl)\r\n            return;\r\n        if (UIManager.PopupQueue.length > 0) {\r\n            UIManager.PopupQueue.push(popupCtrl);\r\n            UIManager.PopupData[popupCtrl.multitonKey] = data;\r\n        }\r\n        else {\r\n            return popupCtrl;\r\n        }\r\n    }\r\n    static openNextPopup() {\r\n        if (UIManager.PopupQueue.length > 0) {\r\n            UIManager.PopupQueue.pop();\r\n            let popup = UIManager.PopupQueue.shift();\r\n            if (popup) {\r\n                UIManager.checkOpenCtrlInst(popup, ...UIManager.PopupData[popup.multitonKey]);\r\n            }\r\n        }\r\n    }\r\n    static openConfirmWindow(content, yesBtnCallback, btnYesTxt, btnCancelTxt) {\r\n        this.openPopup(UI.PublicConfirmationController, new Config.PopupWindowData(content, yesBtnCallback, Config.ConfirmWindowType.Content, btnYesTxt, btnCancelTxt));\r\n    }\r\n    static openRewardWindow(rewardData, yesBtnCallback, btnYesTxt, btnCancelTxt) {\r\n        this.openPopup(UI.PublicConfirmationController, new Config.PopupWindowData(null, yesBtnCallback, Config.ConfirmWindowType.Reward, rewardData, btnYesTxt, btnCancelTxt));\r\n    }\r\n    static openContentRewardWindow(content, rewardData, yesBtnCallback, btnYesTxt, btnCancelTxt) {\r\n        this.openPopup(UI.PublicConfirmationController, new Config.PopupWindowData(content, yesBtnCallback, Config.ConfirmWindowType.ContentAndReward, rewardData, btnYesTxt, btnCancelTxt));\r\n    }\r\n}\r\nUIManager.closeGuide = function (guideName) {\r\n    if (!GuideList[guideName])\r\n        return;\r\n    GuideList[guideName].dispose();\r\n    GuideList[guideName] = null;\r\n};\r\nUIManager.nextGuide = function (guideName) {\r\n    if (!GuideList[guideName])\r\n        return;\r\n    for (let i in GuideList) {\r\n        GuideList[guideName] && GuideList[guideName].dispose();\r\n        GuideList[guideName] = null;\r\n    }\r\n};\r\nUIManager.PopupMap = new Array();\r\nUIManager.PopupQueue = new Array();\r\nUIManager.PopupData = {};\r\n",
  "references": [
    "E:/Practise/demo3DLaya/GrabX/src/UI/Core.ts",
    "E:/Practise/demo3DLaya/GrabX/src/UI/UI.ts",
    "E:/Practise/demo3DLaya/GrabX/src/Common/Utils.ts",
    "E:/Practise/demo3DLaya/GrabX/src/Config/LocalConfig.ts",
    "E:/Practise/demo3DLaya/GrabX/src/Config/Config.ts",
    "E:/Practise/demo3DLaya/GrabX/src/Manager/Manager.ts",
    "E:/Practise/demo3DLaya/GrabX/src/Common/Common.ts"
  ]
}
