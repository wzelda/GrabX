{
  "code": "import * as Config from \"./Config\";\r\nexport function searchConfig(config, param, value) {\r\n    if (null == value) {\r\n        console.error('Value is null');\r\n        return;\r\n    }\r\n    if (Array.isArray(config) == false || config.length == 0) {\r\n        console.error('Invalid or empty config array');\r\n        return;\r\n    }\r\n    let target;\r\n    config.some(v => {\r\n        if (!v[param]) {\r\n            console.error('Miss array param: ', param);\r\n            return true;\r\n        }\r\n        else if (v[param] == value) {\r\n            target = v;\r\n            return true;\r\n        }\r\n    });\r\n    return target;\r\n}\r\nexport function searchConfigById(config, value) {\r\n    return searchConfig(config, 'Id', value);\r\n}\r\nlet configCache = {};\r\nlet levelConfigCache = {};\r\nexport function getConfigByKey(key) {\r\n    if (!key)\r\n        return;\r\n    if (null == configCache[key]) {\r\n        configCache[key] = Config.DataConfig.getLocalConfig(key);\r\n        levelConfigCache[key] = [];\r\n    }\r\n    return configCache[key];\r\n}\r\nexport function getConfigById(key, id) {\r\n    return searchConfigById(getConfigByKey(key), id);\r\n}\r\nexport function getConfigByLevel(key, level) {\r\n    return getConfigById(key, level);\r\n}\r\nexport function getConfigByArg(key, arg, value) {\r\n    return searchConfig(getConfigByKey(key), arg, value);\r\n}\r\nexport function sortConfigByParam(src, param, out) {\r\n    if (!param || Array.isArray(src) == false) {\r\n        console.error('Invalid param or source config');\r\n        return;\r\n    }\r\n    if (Array.isArray(out) == false) {\r\n        out = [];\r\n    }\r\n    src.some(v => {\r\n        if (null == v[param]) {\r\n            console.log('Config miss param: ', param);\r\n            return true;\r\n        }\r\n        if (null == out[v[param]]) {\r\n            out[v[param]] = [];\r\n        }\r\n        out[v[param]].push(v);\r\n    });\r\n    return out;\r\n}\r\nexport function filterConfigByParam(src, param, value, out) {\r\n    if (!param || Array.isArray(src) == false) {\r\n        console.error('Invalid param or source config');\r\n        return;\r\n    }\r\n    if (Array.isArray(out) == false) {\r\n        out = [];\r\n    }\r\n    src.some(v => {\r\n        if (null == v[param]) {\r\n            console.log('Config miss param: ', param);\r\n            return true;\r\n        }\r\n        if (v[param] == value) {\r\n            out.push(v);\r\n        }\r\n    });\r\n    return out;\r\n}\r\nexport function filterConfig(key, param, value, out) {\r\n    return filterConfigByParam(getConfigByKey(key), param, value, out);\r\n}\r\nexport function getItemConfig(id) {\r\n    return getConfigById(Config.LOCALCONFIG_KEY.ITEM, id);\r\n}\r\n",
  "references": [
    "E:/Practise/demo3DLaya/GrabX/src/Common/Common.ts",
    "E:/Practise/demo3DLaya/GrabX/src/Config/Config.ts",
    "E:/Practise/demo3DLaya/GrabX/src/Config/LocalConfig.ts"
  ]
}
