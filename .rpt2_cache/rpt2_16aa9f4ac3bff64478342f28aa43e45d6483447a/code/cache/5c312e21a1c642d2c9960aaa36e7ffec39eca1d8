{
  "code": "import * as Manager from \"../Manager/Manager\";\r\nimport * as Data from \"../Data/Data\";\r\nimport * as Common from \"../Common/Common\";\r\nimport * as Logic from \"./Logic\";\r\nconst DESK_POS = new Laya.Vector3(2.5, 4, -5);\r\nconst DESK_END_POS = new Laya.Vector3(2.5, -1, -5);\r\nconst HAND_POS = new Laya.Vector3(-3, -2, -5);\r\nconst HAND_END_POS = new Laya.Vector3(0, -2, -5);\r\nconst DESK_SIZE = new Laya.Vector3(0.2, 3, 2);\r\nconst HAND_SIZE = new Laya.Vector3(6, 0.5, 0.5);\r\nconst SPEED_FORWARD_DESK = new Laya.Vector3(0, -10, 0);\r\nconst SPEED_BACK_DESK = new Laya.Vector3(0, 10, 0);\r\nconst SPEED_HAND = 0.03;\r\nconst V3_ZERO = new Laya.Vector3();\r\nlet knock_time = 0;\r\nexport class GrabLogic extends Common.EventDispather {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.IsInited = false;\r\n        this.Vdir = new Laya.Vector3();\r\n        this.DeskPosition = new Laya.Vector3();\r\n        this.timeLine = new Laya.TimeLine();\r\n    }\r\n    onAwake() {\r\n        this.GScene = Manager.SceneManager.CurScene;\r\n        this.Hand = this.GScene.addChild(new Laya.MeshSprite3D(Laya.PrimitiveMesh.createBox(HAND_SIZE.x, HAND_SIZE.y, HAND_SIZE.z)));\r\n        this.Desk = this.GScene.addChild(new Laya.MeshSprite3D(Laya.PrimitiveMesh.createBox(DESK_SIZE.x, DESK_SIZE.y, DESK_SIZE.z)));\r\n        this.Hand.transform.position = HAND_POS;\r\n        this.Desk.transform.position = DESK_POS;\r\n        this.addPhysics(this.Hand, HAND_SIZE);\r\n        this.addPhysics(this.Desk, DESK_SIZE);\r\n        this.DeskClass = new RigidObject(this.Desk);\r\n        this.HandClass = new RigidObject(this.Hand);\r\n        this.addCollisionScript();\r\n        Laya.stage.on(Laya.Event.CLICK, this, this.moveHand);\r\n        Laya.stage.on(Laya.Event.DOUBLE_CLICK, this, this.restart);\r\n        this.IsInited = true;\r\n        this.resetVec();\r\n        this.createTimerLine();\r\n        this.moveDesk();\r\n    }\r\n    addPhysics(target, size) {\r\n        var rigidBody = target.addComponent(Laya.Rigidbody3D);\r\n        rigidBody.colliderShape = new Laya.BoxColliderShape(size.x, size.y, size.z);\r\n        rigidBody.gravity = V3_ZERO.clone();\r\n        rigidBody.isTrigger = true;\r\n        rigidBody.isKinematic = true;\r\n    }\r\n    addCollisionScript() {\r\n        this.deskScript = this.Desk.addComponent(Logic.DeskCollisionScript);\r\n        this.deskScript.kinematicSprite = this.Hand;\r\n        this.handScript = this.Hand.addComponent(Logic.HandCollisionScript);\r\n        this.handScript.kinematicSprite = this.Desk;\r\n    }\r\n    onComplete() {\r\n        knock_time++;\r\n        console.log(\"timeLine complete!!!!\", knock_time);\r\n    }\r\n    onLabel(label) {\r\n        console.log(\"LabelName:\" + label);\r\n    }\r\n    createTimerLine() {\r\n        this.timeLine.on(Laya.Event.COMPLETE, this, this.onComplete);\r\n        this.timeLine.on(Laya.Event.LABEL, this, this.onLabel);\r\n    }\r\n    resetVec() {\r\n        this.Vdir.x = DESK_POS.x;\r\n        this.Vdir.y = DESK_POS.y;\r\n        this.Vdir.z = DESK_POS.z;\r\n    }\r\n    knockOnce() {\r\n        this.resetVec();\r\n        this.timeLine.reset();\r\n        this.addKnock();\r\n        this.addKnock(1);\r\n        this.timeLine.play(0, false);\r\n    }\r\n    addStay(_stayTime) {\r\n        _stayTime = _stayTime ? _stayTime * 1000 : 0;\r\n        this.timeLine.addLabel(\"stay\", 0).to(this.Vdir, { y: DESK_POS.y }, _stayTime, null, 0);\r\n    }\r\n    addKnock(_deltaTime) {\r\n        _deltaTime = _deltaTime ? _deltaTime * 1000 : 0;\r\n        this.timeLine\r\n            .to(this.Vdir, { y: DESK_END_POS.y }, 200, null, _deltaTime)\r\n            .to(this.Vdir, { y: DESK_POS.y }, 200, null, 0);\r\n    }\r\n    restart() {\r\n        this.deskScript.clearStatus();\r\n        this.HandClass.State = Manager.StateBase.IDEL;\r\n        this.moveDesk();\r\n        this.resetHand();\r\n    }\r\n    moveDesk() {\r\n        this.DeskClass.State = Manager.StateBase.MOVE_FORWARD;\r\n        this.resetVec();\r\n        this.timeLine.reset();\r\n        this.addKnock();\r\n        this.addKnock(1);\r\n        this.timeLine.play(0, true);\r\n    }\r\n    resetDesk() {\r\n        this.DeskClass.Obj.transform.position = DESK_POS;\r\n    }\r\n    stopDesk() {\r\n        this.timeLine.pause();\r\n        this.DeskClass.State = Manager.StateBase.STOP;\r\n    }\r\n    deskDown() {\r\n        if (!this.IsInited)\r\n            return;\r\n        let vec = this.DeskClass.Obj.transform.position;\r\n        vec.y -= 0.3;\r\n        this.DeskClass.Obj.transform.position = vec;\r\n        if (vec.y <= DESK_END_POS.y) {\r\n            this.DeskClass.State = Manager.StateBase.MOVE_BACK;\r\n        }\r\n    }\r\n    deskUp() {\r\n        if (!this.IsInited)\r\n            return;\r\n        let vec = this.DeskClass.Obj.transform.position;\r\n        vec.y += 0.3;\r\n        this.DeskClass.Obj.transform.position = vec;\r\n        if (vec.y >= DESK_POS.y) {\r\n            this.DeskClass.State = Manager.StateBase.MOVE_FORWARD;\r\n        }\r\n    }\r\n    updateDesk() {\r\n        if (!this.IsInited)\r\n            return;\r\n        if (this.deskScript.IsHit) {\r\n            this.resetDesk();\r\n            this.stopDesk();\r\n            return;\r\n        }\r\n        switch (this.DeskClass.State) {\r\n            case Manager.StateBase.IDEL:\r\n                break;\r\n            case Manager.StateBase.MOVE_FORWARD:\r\n                this.DeskClass.Obj.transform.position = this.Vdir;\r\n                break;\r\n            case Manager.StateBase.MOVE_BACK:\r\n                break;\r\n        }\r\n    }\r\n    moveHand() {\r\n        console.log(this.HandClass.State);\r\n        if (!this.IsInited)\r\n            return;\r\n        if (this.HandClass.State == Manager.StateBase.STOP)\r\n            return;\r\n        if (this.HandClass.State == Manager.StateBase.IDEL) {\r\n            this.HandClass.State = Manager.StateBase.MOVE_FORWARD;\r\n        }\r\n    }\r\n    handForward() {\r\n        if (!this.IsInited)\r\n            return;\r\n        let vec = this.HandClass.Obj.transform.position;\r\n        vec.x += SPEED_HAND * Laya.timer.delta;\r\n        this.HandClass.Obj.transform.position = vec;\r\n        if (this.HandClass.Obj.transform.position.x >= HAND_END_POS.x) {\r\n            this.HandClass.State = Manager.StateBase.MOVE_BACK;\r\n        }\r\n    }\r\n    handBack() {\r\n        if (!this.IsInited)\r\n            return;\r\n        if (this.HandClass.Obj.transform.position.x <= HAND_POS.x) {\r\n            this.resetHand();\r\n            Data.PlayerData.Point += 100;\r\n            console.log(\">>>>>>>>>>>>>>>>>>>>>>>>>>得分：\", Data.PlayerData.Point);\r\n            return;\r\n        }\r\n        if (this.HandClass.Obj.transform.position.x < DESK_POS.x) {\r\n            this.HandClass.State = Manager.StateBase.BACK_PASSED;\r\n        }\r\n        let vec = this.HandClass.Obj.transform.position;\r\n        vec.x -= SPEED_HAND * Laya.timer.delta;\r\n        ;\r\n        this.HandClass.Obj.transform.position = vec;\r\n    }\r\n    resetHand() {\r\n        this.HandClass.Obj.transform.position = HAND_POS;\r\n        this.HandClass.State = Manager.StateBase.IDEL;\r\n        this.enableHandGravity(false);\r\n    }\r\n    stopHand() {\r\n        this.HandClass.State = Manager.StateBase.STOP;\r\n    }\r\n    enableHandGravity(_open) {\r\n        if (this.HandClass.Rigid3D.isKinematic == !_open)\r\n            return;\r\n        this.HandClass.Rigid3D.isKinematic = !_open;\r\n        this.HandClass.Rigid3D.gravity = _open ? new Laya.Vector3(0, -10, 0) : V3_ZERO.clone();\r\n    }\r\n    onHandHit() {\r\n        Data.PlayerData.Point = 0;\r\n        this.stopHand();\r\n        this.enableHandGravity(true);\r\n    }\r\n    updateHand() {\r\n        if (!this.IsInited)\r\n            return;\r\n        if (this.deskScript.IsHit) {\r\n            this.onHandHit();\r\n            return;\r\n        }\r\n        switch (this.HandClass.State) {\r\n            case Manager.StateBase.IDEL:\r\n                break;\r\n            case Manager.StateBase.MOVE_FORWARD:\r\n                this.handForward();\r\n                break;\r\n            case Manager.StateBase.MOVE_BACK:\r\n                this.handBack();\r\n                break;\r\n            case Manager.StateBase.BACK_PASSED:\r\n                this.handBack();\r\n                break;\r\n        }\r\n    }\r\n    onUpdate() {\r\n        this.updateDesk();\r\n        this.updateHand();\r\n    }\r\n}\r\nclass RigidObject {\r\n    constructor(obj) {\r\n        this._state = Manager.StateBase.IDEL;\r\n        this.Obj = obj;\r\n        this.Rigid3D = obj.getComponent(Laya.Rigidbody3D);\r\n    }\r\n    set State(_st) {\r\n        if (this._state !== _st) {\r\n            this._state = _st;\r\n        }\r\n    }\r\n    get State() {\r\n        return this._state;\r\n    }\r\n}\r\n",
  "references": [
    "E:/Practise/demo3DLaya/GrabX/src/Common/Utils.ts",
    "E:/Practise/demo3DLaya/GrabX/src/Config/LocalConfig.ts",
    "E:/Practise/demo3DLaya/GrabX/src/Config/Config.ts",
    "E:/Practise/demo3DLaya/GrabX/src/Manager/Manager.ts",
    "E:/Practise/demo3DLaya/GrabX/src/Data/Data.ts",
    "E:/Practise/demo3DLaya/GrabX/src/Common/Common.ts",
    "E:/Practise/demo3DLaya/GrabX/src/Logic/Logic.ts"
  ]
}
