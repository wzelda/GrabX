{
  "code": "import * as Config from \"../Config/Config\";\r\nimport * as Manager from \"../Manager/Manager\";\r\nimport * as Common from \"../Common/Common\";\r\nimport GEvent from \"../Common/GEvent\";\r\nexport class HttpReqbodyBase {\r\n    constructor(modCode, reqCode, session, accName, reqdata) {\r\n        if (typeof (reqdata) == \"string\") {\r\n            reqdata = JSON.parse(reqdata);\r\n        }\r\n        this.ModuleCode = modCode;\r\n        this.ReqCode = reqCode;\r\n        this.Session = session;\r\n        this.AccountKey = accName;\r\n        this.ReqData = reqdata;\r\n    }\r\n}\r\nexport class DataStruct extends Common.EventDispather {\r\n    static SendReq(reqData) {\r\n        this.reqBody.ReqData = reqData;\r\n        this._NetMgr = new Manager.HttpManager();\r\n        this._NetMgr.Connect('', this.reqBody, this.onResponse.bind(this));\r\n    }\r\n    static set ReqBody(body) {\r\n        if (!this.reqBody)\r\n            this.reqBody = body;\r\n    }\r\n    static set Data(data) { }\r\n    static onConnectEnd(data) { }\r\n    static onResponse(data) {\r\n        if (data && data.RespData != null) {\r\n            this.Data = data.RespData;\r\n        }\r\n        this.onConnectEnd(data);\r\n        this.reqBody.ReqData = null;\r\n    }\r\n    static get NetMgr() {\r\n        if (!this._NetMgr) {\r\n            this._NetMgr = new Manager.HttpManager();\r\n        }\r\n        return this._NetMgr;\r\n    }\r\n    static Connect(reqkey, reqbody, callback, isShowLoading, IsGm) {\r\n        this.NetMgr.Connect(reqkey, reqbody, this.OnHttpRequestComplete.bind(this), isShowLoading, IsGm);\r\n        this._reqkeys.push(reqkey);\r\n    }\r\n    static OnHttpRequestComplete(data, reqkey, reqData) {\r\n    }\r\n    ;\r\n}\r\nDataStruct._reqkeys = new Array();\r\nexport class DevReqBody extends HttpReqbodyBase {\r\n    constructor(modCode, reqCode, reqData) {\r\n        if (!LoginData.Session) {\r\n            console.error('Pls login first');\r\n            return;\r\n        }\r\n        ;\r\n        super(modCode, reqCode, LoginData.Session, LoginData.AccountKey, reqData);\r\n    }\r\n    static get isInited() {\r\n        return this._isBodyInited;\r\n    }\r\n}\r\nDevReqBody._isBaseBodyInited = false;\r\nDevReqBody._isBodyInited = false;\r\nexport class PlayerData {\r\n    static set Data(data) {\r\n        if (null != data.NickName) {\r\n            this.NikeName = data.NickName;\r\n        }\r\n        if (null != data.Avatar) {\r\n            this.Avatar = data.Avatar;\r\n        }\r\n        GEvent.Dispatch(Common.DataPlayerEid.Refreshed);\r\n    }\r\n}\r\nPlayerData.Point = 0;\r\nexport let ShareWord = {\r\n    \"CardWords\": new Array(),\r\n    \"HamsterWords\": new Array(),\r\n    \"CoinWords\": new Array(),\r\n    \"OtherWords\": new Array()\r\n};\r\nexport function GetShareWord(shareType) {\r\n    let rand = 0;\r\n    switch (shareType) {\r\n        case Config.ShareWordEnum.CardWords:\r\n            rand = Math.floor(Math.random() * ShareWord.CardWords.length);\r\n            return ShareWord.CardWords[rand].ShareWord;\r\n        case Config.ShareWordEnum.HamsterWords:\r\n            rand = Math.floor(Math.random() * ShareWord.HamsterWords.length);\r\n            return ShareWord.HamsterWords[rand].ShareWord;\r\n        case Config.ShareWordEnum.CoinWords:\r\n            rand = Math.floor(Math.random() * ShareWord.CoinWords.length);\r\n            return ShareWord.CoinWords[rand].ShareWord;\r\n        default:\r\n            rand = Math.floor(Math.random() * ShareWord.OtherWords.length);\r\n            return ShareWord.OtherWords[rand].ShareWord;\r\n    }\r\n}\r\nexport class ConfigData extends DataStruct {\r\n    static set Data(resp_data) {\r\n        setConfigData(resp_data);\r\n    }\r\n}\r\nfunction setConfigData(resp_data) {\r\n    console.log('配置数据：', resp_data);\r\n    if (!resp_data)\r\n        return;\r\n    Config.DataConfig.instance.saveConfigVersion(resp_data);\r\n    for (let i in resp_data) {\r\n        if (resp_data[i]) {\r\n            Config.DataConfig.instance.storeConfig(resp_data[i].TableId, resp_data[i].Data);\r\n        }\r\n    }\r\n    Config.DataConfig.IsConfigLoaded = true;\r\n    GEvent.Dispatch(Common.SceneLoginEid.ConfigLoaded);\r\n}\r\nexport class LoginData extends DataStruct {\r\n    static get IsLogined() {\r\n        return this._isLogined;\r\n    }\r\n    static set Data(data) {\r\n        if (data.AccountBaseInfo) {\r\n            this.Session = data.AccountBaseInfo.VerifySession;\r\n            this.AccountKey = data.AccountBaseInfo.AccountKey;\r\n            PlayerData.Data = data.AccountBaseInfo;\r\n        }\r\n        if (data.XiuweiInfo) {\r\n            PlayerData.Data = data.XiuweiInfo;\r\n        }\r\n        if (!this._isLogined) {\r\n            this._isLogined = true;\r\n        }\r\n        this.dispatchEvent(Common.SceneLoginEid.LoginSuccess);\r\n    }\r\n}\r\nLoginData._isLogined = false;\r\nexport class UpgradeData extends DataStruct {\r\n    static set Data(respData) {\r\n        if (respData.XiuweiInfo) {\r\n            PlayerData.Data = respData.XiuweiInfo;\r\n        }\r\n        this.dispatchEvent(Common.CharacterCultivationEid.Upgrade, respData.UpOk);\r\n    }\r\n}\r\n",
  "references": [
    "E:/Practise/demo3DLaya/GrabX/src/Config/LocalConfig.ts",
    "E:/Practise/demo3DLaya/GrabX/src/Config/Config.ts",
    "E:/Practise/demo3DLaya/GrabX/src/Manager/Manager.ts",
    "E:/Practise/demo3DLaya/GrabX/src/Common/Common.ts",
    "E:/Practise/demo3DLaya/GrabX/src/Common/GEvent.ts"
  ]
}
