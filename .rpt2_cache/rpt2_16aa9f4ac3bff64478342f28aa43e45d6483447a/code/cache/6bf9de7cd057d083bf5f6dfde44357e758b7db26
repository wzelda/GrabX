{
  "code": "export class HttpReqbodyBase {\r\n    constructor(key, modCode, reqCode, session, accName, reqdata) {\r\n        if (typeof (reqdata) == \"string\") {\r\n            reqdata = JSON.parse(reqdata);\r\n        }\r\n        this.Key = key;\r\n        this.ModuleCode = modCode;\r\n        this.ReqCode = reqCode;\r\n        this.Session = session;\r\n        this.AccountKey = accName;\r\n        this.ReqData = reqdata;\r\n        HttpReqbodyBase.reqbodys[key] = this;\r\n    }\r\n}\r\nHttpReqbodyBase.reqbodys = {};\r\nexport var ReqData = {\r\n    Login: { \"Name\": \"tandy\" },\r\n    AdobePoolUpgrade: { \"Type\": 1 },\r\n    JoinSect: { \"GroupStageId\": 1, \"GroupId\": 1 },\r\n    LearnSectKf: { \"SkillId\": 1 },\r\n    UpgradeKongfa: { \"SkillType\": 1, \"SkillId\": 1 },\r\n    StartSectTask: { \"TaskId\": 1 },\r\n    GrabSectTaskAward: { \"TaskId\": 1 },\r\n    SellBagItem: { \"Position\": 1, \"Type\": 1, \"Id\": 1, \"Num\": 1 },\r\n    UseBagItem: { \"Position\": 1, \"Type\": 1, \"Id\": 1, \"Num\": 1 },\r\n    GmAddBagItem: { \"Type\": 1, \"Id\": 1, \"Num\": 1 },\r\n    GoMonsterTower: { \"ChallengeLevel\": 1, \"HelpHeros\": new Array() },\r\n};\r\nexport class HelpHerosDataClass {\r\n    constructor(key, isRobot) {\r\n        this.Key = key;\r\n        this.IsRobot = isRobot;\r\n    }\r\n    static get NoneHelpHero() {\r\n        return [EmptyHelpHero, EmptyHelpHero, EmptyHelpHero, EmptyHelpHero];\r\n    }\r\n}\r\nexport const EmptyHelpHero = new HelpHerosDataClass('', false);\r\nexport var ReqbodyKey;\r\n(function (ReqbodyKey) {\r\n    ReqbodyKey[\"Config\"] = \"Config\";\r\n    ReqbodyKey[\"Login\"] = \"Login\";\r\n    ReqbodyKey[\"Upgrade\"] = \"Upgrade\";\r\n    ReqbodyKey[\"AdobeUiInfo\"] = \"AdobeUiInfo\";\r\n    ReqbodyKey[\"AdobeHireWorker\"] = \"AdobeHireWorker\";\r\n    ReqbodyKey[\"AdobeAddWorker\"] = \"AdobeAddWorker\";\r\n    ReqbodyKey[\"AdobeReduceWorker\"] = \"AdobeReduceWorker\";\r\n    ReqbodyKey[\"AdobeUpStone\"] = \"AdobeUpStone\";\r\n    ReqbodyKey[\"AdobeUpFood\"] = \"AdobeUpFood\";\r\n    ReqbodyKey[\"AdobeUpWood\"] = \"AdobeUpWood\";\r\n    ReqbodyKey[\"AdobeUpIron\"] = \"AdobeUpIron\";\r\n})(ReqbodyKey || (ReqbodyKey = {}));\r\nexport let NetConfig = {\r\n    RequestUrl: \"http://7.lightpaw.com/truth\",\r\n    HttpRequestUrl: \"https://9z9acv901g.execute-api.cn-northwest-1.amazonaws.com.cn/beta\",\r\n    LocalRequestUrl: \"http://7.lightpaw.com/truth\",\r\n    LocalWechatRequestUrl: \"http://svf37e.natappfree.cc/happy_travel\",\r\n    GMUrl: \"http://7.lightpaw.com/happy_travel/reward\",\r\n    TempName: \"\",\r\n};\r\nexport var HttpConnectState;\r\n(function (HttpConnectState) {\r\n    HttpConnectState[HttpConnectState[\"Error\"] = 0] = \"Error\";\r\n    HttpConnectState[HttpConnectState[\"Success\"] = 1] = \"Success\";\r\n})(HttpConnectState || (HttpConnectState = {}));\r\nexport function getRespData(data) {\r\n    return data && data.RespData;\r\n}\r\nexport class ConfigDataParam {\r\n    constructor(id, version, name, data) {\r\n        this.TableId = id;\r\n        this.Version = version;\r\n        if (name) {\r\n            this.TableName = name;\r\n        }\r\n        if (data) {\r\n            this.Data = data;\r\n        }\r\n    }\r\n}\r\nexport let ConfigReqData = new Array();\r\nexport class LoginReqData {\r\n    constructor(name, pw, jscode, encryptedData, iv) {\r\n        this.Name = name;\r\n        this.Password = pw;\r\n        this.JsCode = jscode;\r\n        this.EncryptedData = encryptedData;\r\n        this.Iv = iv;\r\n    }\r\n}\r\nexport class AdobeAddWorkerReqData {\r\n    constructor(workType) {\r\n        this.WorkType = workType;\r\n    }\r\n}\r\n",
  "references": [
    "E:/Practise/demo3DLaya/GrabX/src/Config/Config.ts"
  ]
}
