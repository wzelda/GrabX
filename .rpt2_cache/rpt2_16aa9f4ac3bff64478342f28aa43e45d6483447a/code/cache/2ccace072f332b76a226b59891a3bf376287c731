{
  "code": "import * as Common from \"../Common/Common\";\r\nimport * as Config from \"./Config\";\r\nconst PREFIX_LOCALCONFIG_KEY = \"configlocal_prefix\";\r\nlet tableIdNum = 1;\r\nexport const LOCALCONFIG_KEY = {\r\n    CULTIVATION_PERIOD: PREFIX_LOCALCONFIG_KEY + tableIdNum++,\r\n    DEFAULT_CONFIG: PREFIX_LOCALCONFIG_KEY + tableIdNum++,\r\n    ADOBE_FOOD: PREFIX_LOCALCONFIG_KEY + tableIdNum++,\r\n    ADOBE_IRON: PREFIX_LOCALCONFIG_KEY + tableIdNum++,\r\n    ADOBE_STONE: PREFIX_LOCALCONFIG_KEY + tableIdNum++,\r\n    ADOBE_DEFAULT: PREFIX_LOCALCONFIG_KEY + tableIdNum++,\r\n    ADOBE_WOOD: PREFIX_LOCALCONFIG_KEY + tableIdNum++,\r\n    ADOBE_POOL: PREFIX_LOCALCONFIG_KEY + tableIdNum++,\r\n    ADOBE_POOL_DEFAULT: PREFIX_LOCALCONFIG_KEY + tableIdNum++,\r\n    ADOBE_POOL_SOIL: PREFIX_LOCALCONFIG_KEY + tableIdNum++,\r\n    ADOBE_POOL_WOOD: PREFIX_LOCALCONFIG_KEY + tableIdNum++,\r\n    ADOBE_POOL_WATER: PREFIX_LOCALCONFIG_KEY + tableIdNum++,\r\n    ADOBE_POOL_FIRE: PREFIX_LOCALCONFIG_KEY + tableIdNum++,\r\n    ADOBE_POOL_GOLD: PREFIX_LOCALCONFIG_KEY + tableIdNum++,\r\n    RANDOM_WORDS: PREFIX_LOCALCONFIG_KEY + tableIdNum++,\r\n    SECTS: PREFIX_LOCALCONFIG_KEY + tableIdNum++,\r\n    SECTERS: PREFIX_LOCALCONFIG_KEY + tableIdNum++,\r\n    SECT_GRADE: PREFIX_LOCALCONFIG_KEY + tableIdNum++,\r\n    SECT_KF: PREFIX_LOCALCONFIG_KEY + tableIdNum++,\r\n    SECT_KF_UPGRADE: PREFIX_LOCALCONFIG_KEY + tableIdNum++,\r\n    SECT_KF_ADD_NUM: PREFIX_LOCALCONFIG_KEY + tableIdNum++,\r\n    SECT_TASK: PREFIX_LOCALCONFIG_KEY + tableIdNum++,\r\n    SECT_TRAIN_TOWER: PREFIX_LOCALCONFIG_KEY + tableIdNum++,\r\n    SECT_DEFAULT: PREFIX_LOCALCONFIG_KEY + tableIdNum++,\r\n    BOOK_SKILL: PREFIX_LOCALCONFIG_KEY + tableIdNum++,\r\n    BAG_UP_COST: PREFIX_LOCALCONFIG_KEY + tableIdNum++,\r\n    ITEM: PREFIX_LOCALCONFIG_KEY + tableIdNum++,\r\n    EQUIPMENT: PREFIX_LOCALCONFIG_KEY + tableIdNum++,\r\n    SECT_ZHAOSHI: PREFIX_LOCALCONFIG_KEY + tableIdNum++,\r\n    BATTLE_AWARDS: PREFIX_LOCALCONFIG_KEY + tableIdNum++,\r\n    BATTLE_AI: PREFIX_LOCALCONFIG_KEY + tableIdNum++,\r\n    MONSTER_TOWER: PREFIX_LOCALCONFIG_KEY + tableIdNum++,\r\n};\r\nexport class DataConfig {\r\n    constructor() {\r\n        this.countNum = 0;\r\n        this.configData = {};\r\n    }\r\n    static getInstance() {\r\n        if (this._instance == undefined) {\r\n            this._instance = new DataConfig();\r\n        }\r\n        return this._instance;\r\n    }\r\n    static get instance() {\r\n        if (this._instance == undefined) {\r\n            this._instance = new DataConfig();\r\n        }\r\n        return this._instance;\r\n    }\r\n    static getConfigByName(key) {\r\n        return this.instance.getConfigByName(key);\r\n    }\r\n    static getConfigById(key, id) {\r\n        return this.instance.getConfigById(key, id);\r\n    }\r\n    static searchConfig(config, param, value) {\r\n        let target = Common.searchArray(config, param, value);\r\n        if (!target) {\r\n            console.error('找不到配置：', param, value);\r\n            return;\r\n        }\r\n        else {\r\n            return target;\r\n        }\r\n    }\r\n    static searchConfigById(config, id) {\r\n        return this.searchConfig(config, 'Id', id);\r\n    }\r\n    static getLocalConfigById(key, id) {\r\n        let config = this.getLocalConfig(key);\r\n        return this.searchConfigById(config, id);\r\n    }\r\n    loadConfig(url, key, cb) {\r\n        Laya.loader.load(url, Laya.Handler.create(this, config => {\r\n            config = JSON.stringify(config);\r\n            var configJson = JSON.parse(config);\r\n            this.configData[key] = configJson;\r\n            this.countNum++;\r\n            cb && cb();\r\n        }));\r\n    }\r\n    initConfig(cb) {\r\n        Laya.loader.load(DataConfig.JSONHOT_URL, Laya.Handler.create(this, config => {\r\n            config = JSON.stringify(config);\r\n            let hotJsons = JSON.parse(config);\r\n            if (Array.isArray(hotJsons)) {\r\n                let total = hotJsons.length;\r\n                hotJsons.forEach((cfg, idx) => {\r\n                    if (idx >= total - 1) {\r\n                        this.loadConfig(cfg.Url, cfg.Type, cb);\r\n                    }\r\n                    else {\r\n                        this.loadConfig(cfg.Url, cfg.Type);\r\n                    }\r\n                });\r\n            }\r\n        }));\r\n    }\r\n    storeConfig(key, data) {\r\n        Common.saveLocalStorage(PREFIX_LOCALCONFIG_KEY + key, data);\r\n        this.countNum++;\r\n    }\r\n    saveAllConfig(data) {\r\n        Common.saveLocalJson(Config.DataConfig.JSON_CONFIGS, data);\r\n    }\r\n    saveConfigVersion(data) {\r\n        if (Array.isArray(data) == false || data.length == 0)\r\n            return;\r\n        let toLocal = new Array();\r\n        data.forEach(v => {\r\n            toLocal.push(new Config.ConfigDataParam(v.TableId, v.Version));\r\n        });\r\n        Common.saveLocalJson(Config.DataConfig.JSON_CONFIGS, toLocal);\r\n    }\r\n    static getLocalConfig(key) {\r\n        if (!key) {\r\n            return console.error('Invalid config key: ', key);\r\n        }\r\n        let config = Common.getLocalStorage(key);\r\n        if (!config) {\r\n            console.error('配置为空：', key);\r\n        }\r\n        else {\r\n            return JSON.parse(config);\r\n        }\r\n    }\r\n    static getConfigVersion(config) {\r\n        return config && config.Version;\r\n    }\r\n    static getConfigVersionByKey(key) {\r\n        return this.getConfigVersion(this.getLocalConfig(key));\r\n    }\r\n    static get localConfigs() {\r\n        return Common.getLocalJson(DataConfig.JSON_CONFIGS) || [];\r\n    }\r\n    getConfigByName(key) {\r\n        return this.configData[key];\r\n    }\r\n    getConfigById(key, id) {\r\n        if (this.configData[key]) {\r\n            var configs = this.configData[key];\r\n            for (var i = 0; i < configs.length; i++) {\r\n                if (configs[i]['id'] == id) {\r\n                    return configs[i];\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    getConfigsByType(key, type) {\r\n        if (this.configData[key]) {\r\n            var configs = this.configData[key];\r\n            var result = new Array();\r\n            for (var i = 0; i < configs.length; i++) {\r\n                if (configs[i]['type'] == type) {\r\n                    result.push(configs[i]);\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n        return null;\r\n    }\r\n}\r\nDataConfig.IsConfigLoaded = false;\r\nDataConfig.JSONHOT_URL = 'res/config/JsonHot.json';\r\nDataConfig.SYNTHESIS_URL = 'res/config/Synthesis.json';\r\nDataConfig.LEVELUP_URL = 'res/config/LevelUp.json';\r\nDataConfig.KONGFU_URL = 'res/config/KongFu.json';\r\nDataConfig.KONGFU_ATTRIBUTE_URL = 'res/config/KongFuAttribute.json';\r\nDataConfig.WEAPON_TYPE_URL = 'res/config/WeaponType.json';\r\nDataConfig.YOKE_URL = 'res/config/Yoke.json';\r\nDataConfig.SECT_URL = 'res/config/Sect.json';\r\nDataConfig.HERO_URL = 'res/config/Hero.json';\r\nDataConfig.CULTIVATION_KEY = \"Cultivation\";\r\nDataConfig.SYNTHESIS_KEY = \"synthesis\";\r\nDataConfig.LEVELUP_KEY = \"levelUp\";\r\nDataConfig.KONGFU_KEY = \"kongFu\";\r\nDataConfig.KONGFU_ATTRIBUTE_KEY = \"kongFuAttribute\";\r\nDataConfig.WEAPON_TYPE_KEY = \"weapon_Type\";\r\nDataConfig.YOKE_KEY = \"yoke\";\r\nDataConfig.SECT_KEY = \"sect\";\r\nDataConfig.Hero_KEY = \"Hero\";\r\nDataConfig.JSON_CONFIGS = \"json_configs\";\r\nDataConfig.MAX_HEALTH = 100;\r\nDataConfig.INIT_GOLD = 5;\r\nDataConfig.ROUND_CD = 15;\r\nDataConfig.TROOP_NUM = 9;\r\nDataConfig.BAG_TOTAL = 8;\r\nDataConfig.HeroSect = 0;\r\nexport class BaseConfigData {\r\n    static get Config() {\r\n        if (!this.config) {\r\n            this.config = DataConfig.getLocalConfig(this.CONFIG_KEY);\r\n        }\r\n        return this.config;\r\n    }\r\n    static getConfigById(id) {\r\n        return DataConfig.searchConfigById(this.Config, id);\r\n    }\r\n    static getConfigByLevel(level) {\r\n        return Common.searchArray(this.Config, 'Level', level);\r\n    }\r\n}\r\nexport class ConfigType {\r\n}\r\nexport class CultivationPeriod extends ConfigType {\r\n}\r\n",
  "references": [
    "E:/Practise/demo3DLaya/GrabX/src/Common/Common.ts",
    "E:/Practise/demo3DLaya/GrabX/src/Config/Config.ts",
    "E:/Practise/demo3DLaya/GrabX/src/Config/LocalConfig.ts"
  ]
}
