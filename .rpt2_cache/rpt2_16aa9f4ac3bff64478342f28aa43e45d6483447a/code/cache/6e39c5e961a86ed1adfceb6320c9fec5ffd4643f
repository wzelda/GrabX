{
  "code": "import * as Config from \"../Config/Config\";\r\nimport * as Manager from \"./Manager\";\r\nimport * as Common from \"../Common/Common\";\r\nlet isFirstSend = true;\r\nexport class HttpManager extends Manager.BaseManager {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.ConnectTimes = 0;\r\n        this.IsShowLoading = false;\r\n        this.IsConnecting = false;\r\n    }\r\n    onAwake() {\r\n    }\r\n    static set RequestUrl(url) {\r\n        Config.NetConfig.RequestUrl = url;\r\n    }\r\n    Connect(reqkey, data, callback, isShowLoading, IsGm) {\r\n        if (!data)\r\n            return;\r\n        this._hr = new XMLHttpRequest();\r\n        this._reqKey = reqkey;\r\n        if (IsGm)\r\n            this._hr.open(\"post\", Config.NetConfig.GMUrl, true);\r\n        else\r\n            this._hr.open(\"post\", Config.NetConfig.RequestUrl, true);\r\n        this._hr.onreadystatechange = this.OnHttpRequestComplete.bind(this);\r\n        this._hr.timeout = 5000;\r\n        this._hr.ontimeout = this.OnTimeout.bind(this);\r\n        this._hr.onerror = this.OnHttpRequestError.bind(this);\r\n        if (typeof (data.ReqData) == 'string') {\r\n            data.ReqData = JSON.parse(data.ReqData);\r\n        }\r\n        this.Data = data;\r\n        this.Callback = callback;\r\n        this.IsShowLoading = isShowLoading;\r\n        this.ConnectTimes++;\r\n        this._hr.responseType = \"text\";\r\n        if (typeof data.ReqData != 'string') {\r\n            data.ReqData = JSON.stringify(data.ReqData);\r\n        }\r\n        this._hr.send(JSON.stringify(data));\r\n        this.IsConnecting = true;\r\n        if (isFirstSend) {\r\n            isFirstSend = false;\r\n        }\r\n        if (isShowLoading == true) {\r\n            Manager.LoadingIconManager.Inst.ShowLoading();\r\n        }\r\n        else {\r\n            Manager.LoadingIconManager.Inst.HideLoading();\r\n            setTimeout(this.LateShowLoading.bind(this), 3000);\r\n        }\r\n        this.dispatchEvent(Common.NetHttpConnectEid.ConnectBegin);\r\n    }\r\n    LateShowLoading() {\r\n        if (this.IsConnecting == true) {\r\n            Manager.LoadingIconManager.Inst.ShowLoading();\r\n        }\r\n    }\r\n    OnHttpRequestError(e) {\r\n        console.log(e);\r\n        this.tryAutoReconnect();\r\n    }\r\n    OnTimeout(e) {\r\n        console.log(e);\r\n        this.tryAutoReconnect();\r\n    }\r\n    OnHttpRequestProgress(e) {\r\n        console.log(\"加载进度>>>>>>>>>>>>>>>>>>>\", e.loaded / e.total);\r\n    }\r\n    _removeRequest() {\r\n        if (this.IsConnecting)\r\n            return;\r\n        this._hr = null;\r\n        this.Data = null;\r\n        HttpManager._hmMap[this._reqKey] = null;\r\n    }\r\n    tryAutoReconnect() {\r\n        if (this.ConnectTimes < 3) {\r\n            Laya.timer.once(500, this, this.autoReConnect);\r\n        }\r\n        else {\r\n            this.showConnectWindow();\r\n        }\r\n    }\r\n    autoReConnect() {\r\n        this.Connect('', this.Data, this.Callback, true);\r\n    }\r\n    showConnectWindow() {\r\n        this.IsConnecting = false;\r\n        Manager.LoadingIconManager.Inst.HideLoading();\r\n        let content = [Config.LocalContent.NetError];\r\n        let self = this;\r\n        Manager.UIManager.openConfirmWindow(content, function () {\r\n            self.Connect('', self.Data, self.Callback, self.IsShowLoading);\r\n        });\r\n    }\r\n    OnHttpRequestComplete() {\r\n        if (this._hr.readyState != 4 || (this._hr.status < 200 || this._hr.status >= 400))\r\n            return;\r\n        this.IsConnecting = false;\r\n        this.ConnectTimes = 0;\r\n        if (!this._hr.responseText)\r\n            return;\r\n        let data = JSON.parse(this._hr.responseText);\r\n        console.log('>>>>>>>>>>>>>>>>>连接状态：', data.RespCode, data.RespMsg);\r\n        if (typeof (this.Callback) == 'function') {\r\n            this.Callback(data);\r\n        }\r\n        this._removeRequest();\r\n        this.dispatchEvent(Common.NetHttpConnectEid.ServiceRespond);\r\n    }\r\n}\r\nHttpManager._hmMap = {};\r\nexport class SocketManager {\r\n    constructor(url, port) {\r\n        this._date = new Date();\r\n        this._timer = 0;\r\n        this._serverTimer = 0;\r\n        this._timeout = 10000;\r\n        this._silentTimer = 0;\r\n        this._serverTimeout = 10000;\r\n        this._disconnectType = 0;\r\n    }\r\n    static get inst() {\r\n        if (!this._inst) {\r\n            this._inst = new SocketManager();\r\n        }\r\n        return this._inst;\r\n    }\r\n    static connect(url, port) {\r\n        this.inst.connect(url, port);\r\n    }\r\n    connect(url, port) {\r\n        this.socket = new Laya.Socket();\r\n        if (port != null) {\r\n            this.socket.connect(url, port);\r\n        }\r\n        else {\r\n            this.socket.connectByUrl(url);\r\n        }\r\n        this.output = this.socket.output;\r\n        this.socket.on(Laya.Event.OPEN, this, this.onSocketOpen);\r\n        this.socket.on(Laya.Event.CLOSE, this, this.onSocketClose);\r\n        this.socket.on(Laya.Event.MESSAGE, this, this.onMessageReveived);\r\n        this.socket.on(Laya.Event.ERROR, this, this.onConnectError);\r\n    }\r\n    startHeartbeat() {\r\n        console.log(this._date.toUTCString() + \" start heartbeat\");\r\n        this._timer = setTimeout(this.timerHandler.bind(this), this._timeout);\r\n    }\r\n    timerHandler() {\r\n        console.log(this._date.toUTCString() + \" send heartbeat\");\r\n        this.socket.send('r u there?');\r\n        this._serverTimer = setTimeout(this.serverTimerHandler.bind(this), this._serverTimeout);\r\n    }\r\n    serverTimerHandler() {\r\n        console.log(this._date.toUTCString() + \" wait server reply timeout\");\r\n        if (this.socket) {\r\n            this.socket.close();\r\n        }\r\n    }\r\n    resetHeartbeat() {\r\n        console.log(this._date.toUTCString() + \" reset heartbeat\");\r\n        clearTimeout(this._timer);\r\n        clearTimeout(this._serverTimer);\r\n    }\r\n    onSocketOpen() {\r\n        console.log(\"Connected\");\r\n        this.resetHeartbeat();\r\n        this.startHeartbeat();\r\n        this.socket.send(\"demonstrate <sendString>\");\r\n        var message = \"demonstrate <output.writeByte>\";\r\n        for (var i = 0; i < message.length; ++i) {\r\n            this.output.writeByte(message.charCodeAt(i));\r\n        }\r\n        this.socket.flush();\r\n    }\r\n    onSocketClose() {\r\n        console.log(\"Socket closed\");\r\n    }\r\n    onMessageReveived(message) {\r\n        console.log(\"Message from server:\", message);\r\n        this.resetHeartbeat();\r\n        this.startHeartbeat();\r\n        if (typeof message == \"string\") {\r\n            console.log(message);\r\n        }\r\n        else if (message instanceof ArrayBuffer) {\r\n            console.log(new Laya.Byte(message).readUTFBytes());\r\n        }\r\n        this.socket.input.clear();\r\n    }\r\n    onConnectError(e) {\r\n        console.log(\"error\");\r\n    }\r\n    setDisconnect(type) {\r\n        this._disconnectType = type;\r\n    }\r\n    reset() {\r\n        this._disconnectType = 0;\r\n        this.resetHeartbeat();\r\n        if (this.socket != null) {\r\n            this.socket.close();\r\n            this.socket = null;\r\n        }\r\n    }\r\n}\r\n",
  "references": [
    "E:/Practise/demo3DLaya/GrabX/src/UI/Core.ts",
    "E:/Practise/demo3DLaya/GrabX/src/UI/UI.ts",
    "E:/Practise/demo3DLaya/GrabX/src/Common/Utils.ts",
    "E:/Practise/demo3DLaya/GrabX/src/Config/LocalConfig.ts",
    "E:/Practise/demo3DLaya/GrabX/src/Config/Config.ts",
    "E:/Practise/demo3DLaya/GrabX/src/Manager/Manager.ts",
    "E:/Practise/demo3DLaya/GrabX/src/Data/Data.ts",
    "E:/Practise/demo3DLaya/GrabX/src/Common/Common.ts"
  ]
}
